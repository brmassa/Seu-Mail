// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Seu.Mail.Data.Context;

#nullable disable

namespace Seu.Mail.Migrations
{
    [DbContext(typeof(EmailDbContext))]
    [Migration("20250822200238_AddUserSettings")]
    partial class AddUserSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Seu.Mail.Models.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndDateTime");

                    b.HasIndex("ParentEventId");

                    b.HasIndex("StartDateTime");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("AccountId", "ExternalId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AutoSyncIntervalMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoSyncSubscriptions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConfirmEventDeletion")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DayViewEndHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayViewStartHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultEventColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultEventDuration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultEventStartTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultReminderMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultView")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableReminders")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstDayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HighlightToday")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxEventsPerDayCell")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MonthViewNavigationRange")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowAllDayEventsAtTop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowDeclinedEvents")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEventTooltips")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowWeekNumbers")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowWeekends")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeSlotInterval")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TodayHighlightColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Use24HourFormat")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("CalendarSettings");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoSync")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ETag")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("EventCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSyncAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncError")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("LastSyncStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<int>("SyncIntervalMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastSyncAt");

                    b.ToTable("CalendarSubscriptions");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("ImapPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImapServer")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSyncAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SmtpServer")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseSsl")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("EmailAccounts");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmailMessageId");

                    b.ToTable("EmailAttachments");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderType")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSystemFolder")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSyncAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MessageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentFolder")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnreadCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("EmailFolders");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bcc")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cc")
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int?>("FolderNavigationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAttachments")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlBody")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateReceived");

                    b.HasIndex("Folder");

                    b.HasIndex("FolderNavigationId");

                    b.HasIndex("IsRead");

                    b.HasIndex("AccountId", "MessageId")
                        .IsUnique();

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailMessageTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmailMessageId");

                    b.HasIndex("TagId");

                    b.ToTable("EmailMessageTags");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("EmailTags");
                });

            modelBuilder.Entity("Seu.Mail.Models.EventAttendee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalendarEventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOrganizer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResponseComment")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId", "Email")
                        .IsUnique();

                    b.ToTable("EventAttendees");
                });

            modelBuilder.Entity("Seu.Mail.Models.EventReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalendarEventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomMessage")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTriggered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinutesBefore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TriggeredAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.HasIndex("IsTriggered");

                    b.ToTable("EventReminders");
                });

            modelBuilder.Entity("Seu.Mail.Models.RecurrenceRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ByDayOfMonth")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ByDayOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ByMonth")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ByWeekOfMonth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CalendarEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExceptionDates")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Frequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId")
                        .IsUnique();

                    b.ToTable("RecurrenceRules");
                });

            modelBuilder.Entity("Seu.Mail.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultSignature")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailDisplayMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmailLayoutMode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmailsPerPage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableKeyboardNavigation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MarkAsReadOnOpen")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowEmailPreview")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseCompactMode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarEvent", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seu.Mail.Models.CalendarEvent", "ParentEvent")
                        .WithMany("ChildEvents")
                        .HasForeignKey("ParentEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Seu.Mail.Models.CalendarSubscription", "Subscription")
                        .WithMany("Events")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");

                    b.Navigation("ParentEvent");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarSettings", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailAccount", "Account")
                        .WithOne()
                        .HasForeignKey("Seu.Mail.Models.CalendarSettings", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarSubscription", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailAttachment", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailMessage", "EmailMessage")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailMessage");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailFolder", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailAccount", "Account")
                        .WithMany("Folders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailMessage", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailAccount", "Account")
                        .WithMany("EmailMessages")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seu.Mail.Models.EmailFolder", "FolderNavigation")
                        .WithMany("EmailMessages")
                        .HasForeignKey("FolderNavigationId");

                    b.Navigation("Account");

                    b.Navigation("FolderNavigation");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailMessageTag", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailMessage", "EmailMessage")
                        .WithMany("EmailMessageTags")
                        .HasForeignKey("EmailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Seu.Mail.Models.EmailTag", "Tag")
                        .WithMany("EmailMessageTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailMessage");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailTag", b =>
                {
                    b.HasOne("Seu.Mail.Models.EmailAccount", "Account")
                        .WithMany("Tags")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Seu.Mail.Models.EventAttendee", b =>
                {
                    b.HasOne("Seu.Mail.Models.CalendarEvent", "CalendarEvent")
                        .WithMany("Attendees")
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");
                });

            modelBuilder.Entity("Seu.Mail.Models.EventReminder", b =>
                {
                    b.HasOne("Seu.Mail.Models.CalendarEvent", "CalendarEvent")
                        .WithMany("Reminders")
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");
                });

            modelBuilder.Entity("Seu.Mail.Models.RecurrenceRule", b =>
                {
                    b.HasOne("Seu.Mail.Models.CalendarEvent", "CalendarEvent")
                        .WithOne("RecurrenceRule")
                        .HasForeignKey("Seu.Mail.Models.RecurrenceRule", "CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalendarEvent");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarEvent", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("ChildEvents");

                    b.Navigation("RecurrenceRule");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Seu.Mail.Models.CalendarSubscription", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailAccount", b =>
                {
                    b.Navigation("EmailMessages");

                    b.Navigation("Folders");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailFolder", b =>
                {
                    b.Navigation("EmailMessages");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailMessage", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("EmailMessageTags");
                });

            modelBuilder.Entity("Seu.Mail.Models.EmailTag", b =>
                {
                    b.Navigation("EmailMessageTags");
                });
#pragma warning restore 612, 618
        }
    }
}
