<div class="month-view">
    <div class="calendar-grid">
        <!-- Header with day names -->
        <div class="calendar-header">
            @foreach (var day in GetDayHeaders())
            {
                <div class="day-header">@day</div>
            }
        </div>

        <!-- Calendar days -->
        <div class="calendar-body">
            @foreach (var week in GetWeeks())
            {
                <div class="calendar-week">
                    @foreach (var day in week)
                    {
                        <div class="calendar-day @GetDayClasses(day)" @onclick="() => OnDayClick(day)">
                            <div class="day-number">@day.Day</div>
                            <div class="day-events">
                                @foreach (var evt in GetEventsForDay(day))
                                {
                                    <div class="event-item" style="background-color: @evt.Color"
                                         @onclick="() => HandleEventClick(evt)" @onclick:stopPropagation="true">
                                        <span class="event-title">@evt.Title</span>
                                        @if (!evt.IsAllDay)
                                        {
                                            <span class="event-time">@evt.StartDateTime.ToString("HH:mm")</span>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public List<CalendarEvent>? Events { get; set; }
    [Parameter] public DateTime CurrentDate { get; set; } = DateTime.Today;
    [Parameter] public CalendarSettings? Settings { get; set; }
    [Parameter] public EventCallback<CalendarEvent> OnEventClick { get; set; }
    [Parameter] public EventCallback<DateTime> OnDateClick { get; set; }
    [Parameter] public EventCallback<(CalendarEvent, DateTime)> OnEventDrop { get; set; }

    private List<string> GetDayHeaders()
    {
        var firstDay = Settings?.FirstDayOfWeek ?? DayOfWeek.Monday;
        var days = new List<string>();

        for (int i = 0; i < 7; i++)
        {
            var dayOfWeek = (DayOfWeek)(((int)firstDay + i) % 7);
            days.Add(dayOfWeek.ToString().Substring(0, 3));
        }

        return days;
    }

    private List<List<DateTime>> GetWeeks()
    {
        var weeks = new List<List<DateTime>>();
        var firstDayOfMonth = new DateTime(CurrentDate.Year, CurrentDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        var firstDay = Settings?.FirstDayOfWeek ?? DayOfWeek.Monday;

        // Calculate the start date (might be from previous month)
        var startDate = firstDayOfMonth;
        while (startDate.DayOfWeek != firstDay)
        {
            startDate = startDate.AddDays(-1);
        }

        // Generate weeks
        var currentDate = startDate;
        while (currentDate <= lastDayOfMonth || weeks.Count == 0 || weeks.Last().Count < 7)
        {
            if (weeks.Count == 0 || weeks.Last().Count == 7)
            {
                weeks.Add(new List<DateTime>());
            }

            weeks.Last().Add(currentDate);
            currentDate = currentDate.AddDays(1);
        }

        // Ensure we have complete weeks
        while (weeks.Last().Count < 7)
        {
            weeks.Last().Add(currentDate);
            currentDate = currentDate.AddDays(1);
        }

        return weeks;
    }

    private string GetDayClasses(DateTime day)
    {
        var classes = new List<string>();

        if (day.Month != CurrentDate.Month)
        {
            classes.Add("other-month");
        }

        if (day.Date == DateTime.Today)
        {
            classes.Add("today");
        }

        if (day.DayOfWeek == DayOfWeek.Saturday || day.DayOfWeek == DayOfWeek.Sunday)
        {
            classes.Add("weekend");
        }

        return string.Join(" ", classes);
    }

    private List<CalendarEvent> GetEventsForDay(DateTime day)
    {
        if (Events == null) return new List<CalendarEvent>();

        return Events.Where(e =>
            e.StartDateTime.Date <= day.Date &&
            e.EndDateTime.Date >= day.Date)
            .OrderBy(e => e.StartDateTime)
            .Take(3) // Limit to 3 events per day for display
            .ToList();
    }

    private async Task OnDayClick(DateTime day)
    {
        await OnDateClick.InvokeAsync(day);
    }

    private async Task HandleEventClick(CalendarEvent evt)
    {
        await OnEventClick.InvokeAsync(evt);
    }
}

<style>
.month-view {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.calendar-grid {
    display: flex;
    flex-direction: column;
    height: 100%;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
}

.calendar-header {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
}

.day-header {
    padding: 0.75rem;
    text-align: center;
    font-weight: 600;
    border-right: 1px solid #dee2e6;
}

.day-header:last-child {
    border-right: none;
}

.calendar-body {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.calendar-week {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    flex: 1;
    min-height: 120px;
}

.calendar-day {
    border-right: 1px solid #dee2e6;
    border-bottom: 1px solid #dee2e6;
    padding: 0.5rem;
    cursor: pointer;
    transition: background-color 0.2s;
    display: flex;
    flex-direction: column;
    min-height: 100px;
}

.calendar-day:hover {
    background-color: #f8f9fa;
}

.calendar-day:last-child {
    border-right: none;
}

.calendar-week:last-child .calendar-day {
    border-bottom: none;
}

.calendar-day.other-month {
    color: #6c757d;
    background-color: #f8f9fa;
}

.calendar-day.today {
    background-color: #fff3cd;
}

.calendar-day.weekend {
    background-color: #f8f9fa;
}

.day-number {
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.day-events {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.event-item {
    padding: 2px 6px;
    border-radius: 3px;
    font-size: 0.75rem;
    color: white;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 18px;
    overflow: hidden;
}

.event-item:hover {
    opacity: 0.8;
}

.event-title {
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.event-time {
    font-size: 0.6rem;
    margin-left: 4px;
}
</style>
