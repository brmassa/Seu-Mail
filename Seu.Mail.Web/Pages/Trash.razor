@page "/trash"
@inject IEmailService EmailService
@inject IAccountService AccountService
@inject IHtmlUtilityService HtmlUtilityService
@inject NavigationManager Navigation

<PageTitle>Trash - Seu Email</PageTitle>

<div class="email-list-container h-100">
    <div class="email-list-header bg-white border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    <i class="fas fa-trash me-2 text-primary"></i>
                    Trash
                    @if (emails.Any())
                    {
                        <span class="badge bg-secondary ms-2">@emails.Count</span>
                    }
                </h4>
            </div>
            <div class="email-actions">
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="SelectAll">
                    <i class="fas fa-check-square"></i>
                    Select All
                </button>
                <button class="btn btn-outline-success btn-sm me-2" @onclick="RestoreSelected" disabled="@(!selectedEmails.Any())">
                    <i class="fas fa-undo"></i>
                    Restore (@selectedEmails.Count)
                </button>
                <button class="btn btn-outline-danger btn-sm me-2" @onclick="DeleteSelectedPermanently" disabled="@(!selectedEmails.Any())">
                    <i class="fas fa-times"></i>
                    Delete Forever (@selectedEmails.Count)
                </button>
                <button class="btn btn-outline-warning btn-sm" @onclick="EmptyTrash" disabled="@(!emails.Any())">
                    <i class="fas fa-trash-alt"></i>
                    Empty Trash
                </button>
            </div>
        </div>
    </div>

    <div class="email-list-content flex-grow-1 overflow-auto">
        @if (isLoading)
        {
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading trash...</p>
            </div>
        }
        else if (!emails.Any())
        {
            <div class="empty-state text-center p-5">
                <i class="fas fa-trash fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">Trash is empty</h5>
                <p class="text-muted">No deleted emails to display</p>
                <div class="mt-3">
                    <a href="/" class="btn btn-outline-primary me-2">
                        <i class="fas fa-inbox me-2"></i>
                        Go to Inbox
                    </a>
                    <a href="/compose" class="btn btn-primary">
                        <i class="fas fa-edit me-2"></i>
                        Compose Email
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="email-list">
                @foreach (var email in emails)
                {
                    <div class="email-item deleted @(selectedEmails.Contains(email.Id) ? "selected" : "")"
                         @onclick="() => SelectEmail(email.Id)">
                        <div class="email-checkbox">
                            <input type="checkbox" class="form-check-input"
                                   checked="@selectedEmails.Contains(email.Id)"
                                   @onchange="(e) => ToggleEmailSelection(email.Id, (bool)e.Value!)"
                                   @onclick:stopPropagation="true">
                        </div>

                        <div class="email-content flex-grow-1" @onclick="() => ViewEmail(email.Id)" @onclick:stopPropagation="true">
                            <div class="email-header d-flex justify-content-between align-items-start">
                                <div class="email-sender">
                                    @if (email.Folder == "SENT")
                                    {
                                        <strong class="sender-name">To: @GetSenderName(email.To)</strong>
                                        <span class="sender-email text-muted ms-1">@GetSenderEmail(email.To)</span>
                                    }
                                    else
                                    {
                                        <strong class="sender-name">@GetSenderName(email.From)</strong>
                                        <span class="sender-email text-muted ms-1">@GetSenderEmail(email.From)</span>
                                    }
                                </div>
                                <div class="email-meta text-muted">
                                    <span class="email-date">@FormatDate(email.DateReceived)</span>
                                    @if (email.HasAttachments)
                                    {
                                        <i class="fas fa-paperclip ms-2"></i>
                                    }
                                    @if (email.IsImportant)
                                    {
                                        <i class="fas fa-star text-warning ms-2"></i>
                                    }
                                    <span class="badge bg-secondary ms-2 small">@email.Folder</span>
                                </div>
                            </div>

                            <div class="email-subject">
                                @HtmlUtilityService.StripHtml(email.Subject)
                            </div>

                            <div class="email-preview text-muted">
                                @GetEmailPreview(email)
                            </div>

                            <div class="email-deleted-info small text-muted mt-1">
                                <i class="fas fa-trash me-1"></i>
                                Deleted @FormatDeletedDate(email.DateReceived)
                            </div>
                        </div>

                        <div class="email-actions">
                            <button class="btn btn-sm btn-outline-success" @onclick="() => RestoreEmail(email.Id)" @onclick:stopPropagation="true" title="Restore">
                                <i class="fas fa-undo"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePermanently(email.Id)" @onclick:stopPropagation="true" title="Delete Forever">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>

            @if (hasMoreEmails)
            {
                <div class="load-more-container p-3 text-center">
                    <button class="btn btn-outline-primary" @onclick="LoadMoreEmails" disabled="@isLoadingMore">
                        @if (isLoadingMore)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Load More
                    </button>
                </div>
            }
        }
    </div>
</div>

<!-- Empty Trash Confirmation Modal -->
@if (showEmptyTrashModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                        Empty Trash
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideEmptyTrashModal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to permanently delete all emails in trash?</p>
                    <p class="text-warning">
                        <strong>This action cannot be undone.</strong> All @emails.Count emails will be permanently removed.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideEmptyTrashModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmEmptyTrash" disabled="@isEmptyingTrash">
                        @if (isEmptyingTrash)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="fas fa-trash-alt me-2"></i>
                        Empty Trash
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast Messages -->
@if (showToast)
{
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <strong class="me-auto">@toastTitle</strong>
                <button type="button" class="btn-close" @onclick="() => showToast = false"></button>
            </div>
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    </div>
}

@code {
    private List<EmailMessage> emails = new();
    private HashSet<int> selectedEmails = new();
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private bool hasMoreEmails = true;
    private int currentPage = 1;
    private const int pageSize = 50;

    // Empty trash modal
    private bool showEmptyTrashModal = false;
    private bool isEmptyingTrash = false;

    // Toast properties
    private bool showToast = false;
    private string toastTitle = "";
    private string toastMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadEmails();
    }

    private async Task LoadEmails()
    {
        isLoading = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                emails = await EmailService.GetEmailsAsync(account, "TRASH", pageSize);
                hasMoreEmails = emails.Count == pageSize;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trash: {ex.Message}");
            ShowToast("Error", "Failed to load trash emails.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMoreEmails()
    {
        if (isLoadingMore || !hasMoreEmails) return;

        isLoadingMore = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                currentPage++;
                var moreEmails = await EmailService.GetEmailsAsync(account, "TRASH", pageSize);

                if (moreEmails.Any())
                {
                    emails.AddRange(moreEmails);
                    hasMoreEmails = moreEmails.Count == pageSize;
                }
                else
                {
                    hasMoreEmails = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more trash emails: {ex.Message}");
            ShowToast("Error", "Failed to load more emails.");
        }
        finally
        {
            isLoadingMore = false;
        }
    }

    private void SelectEmail(int emailId)
    {
        if (selectedEmails.Contains(emailId))
        {
            selectedEmails.Remove(emailId);
        }
        else
        {
            selectedEmails.Add(emailId);
        }
    }

    private void ToggleEmailSelection(int emailId, bool isSelected)
    {
        if (isSelected)
        {
            selectedEmails.Add(emailId);
        }
        else
        {
            selectedEmails.Remove(emailId);
        }
    }

    private void SelectAll()
    {
        if (selectedEmails.Count == emails.Count)
        {
            selectedEmails.Clear();
        }
        else
        {
            selectedEmails = emails.Select(e => e.Id).ToHashSet();
        }
    }

    private void RestoreSelected()
    {
        if (!selectedEmails.Any()) return;

        try
        {
            foreach (var emailId in selectedEmails)
            {
                var email = emails.FirstOrDefault(e => e.Id == emailId);
                if (email != null)
                {
                    // Restore to original folder (INBOX for received, SENT for sent)
                    var originalFolder = email.Folder == "SENT" ? "SENT" : "INBOX";
                    RestoreEmailToFolder(emailId, originalFolder);
                }
            }

            emails.RemoveAll(e => selectedEmails.Contains(e.Id));
            selectedEmails.Clear();
            ShowToast("Success", "Selected emails restored successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring emails: {ex.Message}");
            ShowToast("Error", "Failed to restore selected emails.");
        }
    }

    private void RestoreEmail(int emailId)
    {
        try
        {
            var email = emails.FirstOrDefault(e => e.Id == emailId);
            if (email != null)
            {
                var originalFolder = email.Folder == "SENT" ? "SENT" : "INBOX";
                RestoreEmailToFolder(emailId, originalFolder);
                emails.RemoveAll(e => e.Id == emailId);
                selectedEmails.Remove(emailId);
                ShowToast("Success", "Email restored successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring email: {ex.Message}");
            ShowToast("Error", "Failed to restore email.");
        }
    }

    private void RestoreEmailToFolder(int emailId, string folder)
    {
        // This would need to be implemented in the EmailService
        // For now, we'll simulate by updating the folder and isDeleted flag
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (email != null)
        {
            email.IsDeleted = false;
            email.Folder = folder;
            // TODO: Update in database
        }
    }

    private async Task DeleteSelectedPermanently()
    {
        if (!selectedEmails.Any()) return;

        try
        {
            foreach (var emailId in selectedEmails)
            {
                // TODO: Implement permanent deletion in EmailService
                await EmailService.DeleteEmailAsync(emailId);
            }

            emails.RemoveAll(e => selectedEmails.Contains(e.Id));
            selectedEmails.Clear();
            ShowToast("Success", "Selected emails deleted permanently.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error permanently deleting emails: {ex.Message}");
            ShowToast("Error", "Failed to permanently delete selected emails.");
        }
    }

    private async Task DeletePermanently(int emailId)
    {
        try
        {
            // TODO: Implement permanent deletion in EmailService
            await EmailService.DeleteEmailAsync(emailId);
            emails.RemoveAll(e => e.Id == emailId);
            selectedEmails.Remove(emailId);
            ShowToast("Success", "Email deleted permanently.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error permanently deleting email: {ex.Message}");
            ShowToast("Error", "Failed to permanently delete email.");
        }
    }

    private void EmptyTrash()
    {
        if (emails.Any())
        {
            showEmptyTrashModal = true;
        }
    }

    private void HideEmptyTrashModal()
    {
        showEmptyTrashModal = false;
    }

    private async Task ConfirmEmptyTrash()
    {
        if (isEmptyingTrash) return;

        isEmptyingTrash = true;
        try
        {
            foreach (var email in emails)
            {
                // TODO: Implement permanent deletion in EmailService
                await EmailService.DeleteEmailAsync(email.Id);
            }

            emails.Clear();
            selectedEmails.Clear();
            ShowToast("Success", "Trash emptied successfully.");
            HideEmptyTrashModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error emptying trash: {ex.Message}");
            ShowToast("Error", "Failed to empty trash.");
        }
        finally
        {
            isEmptyingTrash = false;
        }
    }

    private void ViewEmail(int emailId)
    {
        Navigation.NavigateTo($"/email/{emailId}");
    }

    private string GetSenderName(string from)
    {
        if (string.IsNullOrEmpty(from)) return "Unknown";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"^(.+?)\s*<");
        if (match.Success)
        {
            return match.Groups[1].Value.Trim('"');
        }

        return from.Split('@')[0];
    }

    private string GetSenderEmail(string from)
    {
        if (string.IsNullOrEmpty(from)) return "";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"<(.+?)>");
        if (match.Success)
        {
            return match.Groups[1].Value;
        }

        return from;
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diff = now - date;

        if (diff.TotalDays < 1)
        {
            return date.ToString("HH:mm");
        }
        else if (diff.TotalDays < 7)
        {
            return date.ToString("ddd");
        }
        else if (date.Year == now.Year)
        {
            return date.ToString("MMM dd");
        }
        else
        {
            return date.ToString("MMM dd, yyyy");
        }
    }

    private string FormatDeletedDate(DateTime date)
    {
        var now = DateTime.Now;
        var diff = now - date;

        if (diff.TotalHours < 1)
        {
            return "recently";
        }
        else if (diff.TotalDays < 1)
        {
            return "today";
        }
        else if (diff.TotalDays < 7)
        {
            return $"{(int)diff.TotalDays} day{((int)diff.TotalDays > 1 ? "s" : "")} ago";
        }
        else
        {
            return date.ToString("MMM dd, yyyy");
        }
    }

    private string GetEmailPreview(EmailMessage email)
    {
        var content = !string.IsNullOrEmpty(email.TextBody) ? email.TextBody : email.HtmlBody;
        if (string.IsNullOrEmpty(content)) return "";

        // Remove HTML tags if present
        var preview = System.Text.RegularExpressions.Regex.Replace(content, "<.*?>", "");

        // Limit to 100 characters
        if (preview.Length > 100)
        {
            preview = preview.Substring(0, 100) + "...";
        }

        return preview;
    }



    private void ShowToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        showToast = true;
        StateHasChanged();

        Task.Delay(4000).ContinueWith(_ =>
        {
            showToast = false;
            InvokeAsync(StateHasChanged);
        });
    }
}
