@page "/sent"
@inject IEmailService EmailService
@inject IAccountService AccountService
@inject IUserSettingsService UserSettingsService
@inject IHtmlUtilityService HtmlUtilityService
@inject NavigationManager Navigation

<PageTitle>Sent - Seu Email</PageTitle>

<div class="email-list-container h-100">
    <div class="email-list-header bg-white border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    <i class="fas fa-paper-plane me-2 text-primary"></i>
                    Sent
                    @if (emails.Any())
                    {
                        <span class="badge bg-secondary ms-2">@emails.Count</span>
                    }
                </h4>
            </div>
            <div class="email-actions">
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="SelectAll">
                    <i class="fas fa-check-square"></i>
                    Select All
                </button>
                <button class="btn btn-outline-danger btn-sm" @onclick="DeleteSelected"
                        disabled="@(!selectedEmails.Any())">
                    <i class="fas fa-trash"></i>
                    Delete (@selectedEmails.Count)
                </button>
            </div>
        </div>
    </div>

    <div class="email-list-content flex-grow-1 overflow-auto">
        @if (isLoading)
        {
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading sent emails...</p>
            </div>
        }
        else if (!emails.Any())
        {
            <div class="empty-state text-center p-5">
                <i class="fas fa-paper-plane fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">No sent emails</h5>
                <p class="text-muted">You haven't sent any emails yet</p>
                <a href="/compose" class="btn btn-primary">
                    <i class="fas fa-edit me-2"></i>
                    Compose Email
                </a>
            </div>
        }
        else
        {
            <div class="email-list">
                @foreach (var email in emails)
                {
                    <div class="email-item sent @(selectedEmails.Contains(email.Id) ? "selected" : "")"
                         @onclick="() => SelectEmail(email.Id)">
                        <div class="email-checkbox">
                            <input type="checkbox" class="form-check-input"
                                   checked="@selectedEmails.Contains(email.Id)"
                                   @onchange="(e) => ToggleEmailSelection(email.Id, (bool)e.Value!)"
                                   @onclick:stopPropagation="true">
                        </div>

                        <div class="email-content flex-grow-1" @onclick="() => ViewEmail(email.Id)"
                             @onclick:stopPropagation="true">
                            <div class="email-header d-flex justify-content-between align-items-start">
                                <div class="email-recipient">
                                    <strong class="recipient-name">To: @GetRecipientName(email.To)</strong>
                                    <span class="recipient-email text-muted ms-1">@GetRecipientEmail(email.To)</span>
                                </div>
                                <div class="email-meta text-muted">
                                    <span class="email-date">@FormatDate(email.DateSent)</span>
                                    @if (email.HasAttachments)
                                    {
                                        <i class="fas fa-paperclip ms-2"></i>
                                    }
                                    @if (email.IsImportant)
                                    {
                                        <i class="fas fa-star text-warning ms-2"></i>
                                    }
                                </div>
                            </div>

                            <div class="email-subject">
                                @HtmlUtilityService.StripHtml(email.Subject)
                            </div>

                            <div class="email-preview text-muted">
                                @GetEmailPreview(email)
                            </div>

                            @if (!string.IsNullOrEmpty(email.Cc))
                            {
                                <div class="email-cc text-muted small mt-1">
                                    <i class="fas fa-copy me-1"></i>
                                    Cc: @email.Cc
                                </div>
                            }
                        </div>

                        <div class="email-actions">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => ForwardEmail(email.Id)"
                                    @onclick:stopPropagation="true">
                                <i class="fas fa-share"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-warning" @onclick="() => ToggleImportant(email.Id)"
                                    @onclick:stopPropagation="true">
                                <i class="fas fa-star @(email.IsImportant ? "text-warning" : "")"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEmail(email.Id)"
                                    @onclick:stopPropagation="true">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>

            @if (hasMoreEmails)
            {
                <div class="load-more-container p-3 text-center">
                    <button class="btn btn-outline-primary" @onclick="LoadMoreEmails" disabled="@isLoadingMore">
                        @if (isLoadingMore)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Load More
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<EmailMessage> emails = new();
    private HashSet<int> selectedEmails = new();
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private bool hasMoreEmails = true;
    private int currentPage = 1;
    private const int pageSize = 50;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmails();
    }

    private async Task LoadEmails()
    {
        isLoading = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                emails = await EmailService.GetEmailsAsync(account, "SENT", pageSize);
                hasMoreEmails = emails.Count == pageSize;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sent emails: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMoreEmails()
    {
        if (isLoadingMore || !hasMoreEmails) return;

        isLoadingMore = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                currentPage++;
                var moreEmails = await EmailService.GetEmailsAsync(account, "SENT", pageSize);

                if (moreEmails.Any())
                {
                    emails.AddRange(moreEmails);
                    hasMoreEmails = moreEmails.Count == pageSize;
                }
                else
                {
                    hasMoreEmails = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more sent emails: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
        }
    }

    private void SelectEmail(int emailId)
    {
        if (selectedEmails.Contains(emailId))
        {
            selectedEmails.Remove(emailId);
        }
        else
        {
            selectedEmails.Add(emailId);
        }
    }

    private void ToggleEmailSelection(int emailId, bool isSelected)
    {
        if (isSelected)
        {
            selectedEmails.Add(emailId);
        }
        else
        {
            selectedEmails.Remove(emailId);
        }
    }

    private void SelectAll()
    {
        if (selectedEmails.Count == emails.Count)
        {
            selectedEmails.Clear();
        }
        else
        {
            selectedEmails = emails.Select(e => e.Id).ToHashSet();
        }
    }

    private async Task DeleteSelected()
    {
        if (!selectedEmails.Any()) return;

        try
        {
            foreach (var emailId in selectedEmails)
            {
                await EmailService.DeleteEmailAsync(emailId);
            }

            emails.RemoveAll(e => selectedEmails.Contains(e.Id));
            selectedEmails.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting sent emails: {ex.Message}");
        }
    }

    private async Task DeleteEmail(int emailId)
    {
        try
        {
            await EmailService.DeleteEmailAsync(emailId);
            emails.RemoveAll(e => e.Id == emailId);
            selectedEmails.Remove(emailId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting sent email: {ex.Message}");
        }
    }

    private Task ToggleImportant(int emailId)
    {
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (email != null)
        {
            email.IsImportant = !email.IsImportant;
            // TODO: Update in database
        }

        return Task.CompletedTask;
    }

    private void ViewEmail(int emailId)
    {
        Navigation.NavigateTo($"/email/{emailId}");
    }

    private void ForwardEmail(int emailId)
    {
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (email != null)
        {
            var forwardSubject = email.Subject.StartsWith("Fwd: ") ? email.Subject : $"Fwd: {email.Subject}";
            Navigation.NavigateTo($"/compose?forward={emailId}&subject={Uri.EscapeDataString(forwardSubject)}");
        }
    }

    private string GetRecipientName(string to)
    {
        if (string.IsNullOrEmpty(to)) return "Unknown";

        var firstRecipient = to.Split(';')[0].Trim();
        var match = System.Text.RegularExpressions.Regex.Match(firstRecipient, @"^(.+?)\s*<");
        if (match.Success)
        {
            return match.Groups[1].Value.Trim('"');
        }

        return firstRecipient.Split('@')[0];
    }

    private string GetRecipientEmail(string to)
    {
        if (string.IsNullOrEmpty(to)) return "";

        var firstRecipient = to.Split(';')[0].Trim();
        var match = System.Text.RegularExpressions.Regex.Match(firstRecipient, @"<(.+?)>");
        if (match.Success)
        {
            return match.Groups[1].Value;
        }

        return firstRecipient;
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diff = now - date;

        if (diff.TotalDays < 1)
        {
            return date.ToString("HH:mm");
        }
        else if (diff.TotalDays < 7)
        {
            return date.ToString("ddd");
        }
        else if (date.Year == now.Year)
        {
            return date.ToString("MMM dd");
        }
        else
        {
            return date.ToString("MMM dd, yyyy");
        }
    }

    private string GetEmailPreview(EmailMessage email)
    {
        var content = !string.IsNullOrEmpty(email.TextBody) ? email.TextBody : email.HtmlBody;
        if (string.IsNullOrEmpty(content)) return "";

        // Remove HTML tags if present
        var preview = System.Text.RegularExpressions.Regex.Replace(content, "<.*?>", "");

        // Limit to 100 characters
        if (preview.Length > 100)
        {
            preview = preview.Substring(0, 100) + "...";
        }

        return preview;
    }


}
