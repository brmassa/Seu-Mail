@page "/calendar"
@page "/calendar/{ViewType}"
@page "/calendar/{Year:int}/{Month:int}"
@page "/calendar/{ViewType}/{Year:int}/{Month:int}"
@page "/calendar/{ViewType}/{Year:int}/{Month:int}/{Day:int}"
@inject ICalendarService CalendarService
@inject IAccountService AccountService
@inject NavigationManager Navigation

<PageTitle>Calendar - Seu Email</PageTitle>

<div class="calendar-container d-flex flex-column h-100">
    <!-- Calendar Header -->
    <div class="calendar-header bg-light border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <!-- Navigation Controls -->
            <div class="d-flex align-items-center gap-2">
                <button class="btn btn-outline-secondary btn-sm" @onclick="NavigateToPrevious">
                    <i class="fas fa-chevron-left"></i>
                </button>

                <button class="btn btn-outline-secondary btn-sm" @onclick="NavigateToToday">
                    Today
                </button>

                <button class="btn btn-outline-secondary btn-sm" @onclick="NavigateToNext">
                    <i class="fas fa-chevron-right"></i>
                </button>

                <h4 class="mb-0 ms-3">@GetCurrentDateTitle()</h4>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex align-items-center gap-2">
                <div class="btn-group" role="group">
                    <button type="button" class="btn @(CurrentViewType == CalendarViewType.Month ? "btn-primary" : "btn-outline-primary")"
                            @onclick="() => SetViewType(CalendarViewType.Month)">
                        Month
                    </button>
                    <button type="button" class="btn @(CurrentViewType == CalendarViewType.Week ? "btn-primary" : "btn-outline-primary")"
                            @onclick="() => SetViewType(CalendarViewType.Week)">
                        Week
                    </button>
                    <button type="button" class="btn @(CurrentViewType == CalendarViewType.Day ? "btn-primary" : "btn-outline-primary")"
                            @onclick="() => SetViewType(CalendarViewType.Day)">
                        Day
                    </button>
                </div>

                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle me-2" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-cog"></i>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/calendar/settings">
                            <i class="fas fa-cog me-2"></i>Calendar Settings
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><button class="dropdown-item" @onclick="ShowImportExport">
                            <i class="fas fa-exchange-alt me-2"></i>Import/Export
                        </button></li>
                    </ul>
                </div>

                <button class="btn btn-success btn-sm" @onclick="CreateNewEvent">
                    <i class="fas fa-plus"></i> New Event
                </button>
            </div>
        </div>
    </div>

    <!-- Calendar Content -->
    <div class="calendar-content flex-grow-1 overflow-hidden">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center h-100">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading calendar...</span>
                </div>
            </div>
        }
        else if (Events != null)
        {
            @switch (CurrentViewType)
            {
                case CalendarViewType.Month:
                    <MonthView Events="@Events"
                              CurrentDate="@CurrentDate"
                              Settings="@Settings"
                              OnEventClick="@HandleEventClick"
                              OnDateClick="@HandleDateClick"
                              OnEventDrop="@HandleEventDrop" />
                    break;

                case CalendarViewType.Week:
                    <WeekView Events="@Events"
                             CurrentDate="@CurrentDate"
                             Settings="@Settings"
                             OnEventClick="@HandleEventClick"
                             OnTimeSlotClick="@HandleTimeSlotClick"
                             OnEventDrop="@HandleEventDrop" />
                    break;

                case CalendarViewType.Day:
                    <DayView Events="@Events"
                            CurrentDate="@CurrentDate"
                            Settings="@Settings"
                            OnEventClick="@HandleEventClick"
                            OnTimeSlotClick="@HandleTimeSlotClick"
                            OnEventDrop="@HandleEventDrop" />
                    break;
            }
        }
    </div>
</div>

<!-- Event Editor Modal -->
@if (ShowEventEditor)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(EditingEvent?.Id == 0 ? "Create Event" : "Edit Event")</h5>
                    <button type="button" class="btn-close" @onclick="CloseEventEditor"></button>
                </div>
                <div class="modal-body">
                    @if (EditingEvent != null)
                    {
                        <EditForm Model="EditingEvent" OnValidSubmit="SaveEvent">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label class="form-label">Title *</label>
                                <InputText @bind-Value="EditingEvent.Title" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea @bind-Value="EditingEvent.Description" class="form-control" rows="3" />
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Start Date *</label>
                                        <InputDate @bind-Value="StartDate" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Start Time *</label>
                                        <InputText @bind-Value="StartTime" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">End Date *</label>
                                        <InputDate @bind-Value="EndDate" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">End Time *</label>
                                        <InputText @bind-Value="EndTime" class="form-control" />
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Location</label>
                                <InputText @bind-Value="EditingEvent.Location" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="EditingEvent.IsAllDay" class="form-check-input" id="isAllDay" />
                                    <label class="form-check-label" for="isAllDay">
                                        All Day Event
                                    </label>
                                </div>
                            </div>

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" @onclick="CloseEventEditor">Cancel</button>
                                <button type="submit" class="btn btn-primary">Save</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Import/Export Modal -->
@if (ShowImportExportModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Import/Export Calendar</h5>
                    <button type="button" class="btn-close" @onclick="CloseImportExport"></button>
                </div>
                <div class="modal-body">
                    <ImportExportComponent OnDataChanged="OnImportExportDataChanged" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? ViewType { get; set; }
    [Parameter] public int? Year { get; set; }
    [Parameter] public int? Month { get; set; }
    [Parameter] public int? Day { get; set; }

    private CalendarViewType CurrentViewType { get; set; } = CalendarViewType.Month;
    private DateTime CurrentDate { get; set; } = DateTime.Today;
    private List<CalendarEvent>? Events { get; set; }
    private CalendarSettings? Settings { get; set; }
    private EmailAccount? CurrentAccount { get; set; }

    private bool IsLoading { get; set; } = true;
    private CalendarEvent? EditingEvent { get; set; }
    private bool ShowEventEditor { get; set; }
    private bool ShowImportExportModal { get; set; }

    private DateOnly StartDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    private string StartTime { get; set; } = "09:00";
    private DateOnly EndDate { get; set; } = DateOnly.FromDateTime(DateTime.Today);
    private string EndTime { get; set; } = "10:00";

    protected override async Task OnInitializedAsync()
    {
        CurrentAccount = await AccountService.GetDefaultAccountAsync();
        if (CurrentAccount == null)
        {
            Navigation.NavigateTo("/accounts");
            return;
        }

        // Create default settings
        Settings = new CalendarSettings
        {
            FirstDayOfWeek = DayOfWeek.Monday,
            ShowWeekNumbers = true,
            DefaultView = CalendarViewType.Month,
            DayViewStartHour = 6,
            DayViewEndHour = 22
        };

        ParseRouteParameters();
        await LoadEvents();
        IsLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        ParseRouteParameters();
        IsLoading = true;
        StateHasChanged();
        await LoadEvents();
        IsLoading = false;
    }

    private void ParseRouteParameters()
    {
        if (!string.IsNullOrEmpty(ViewType) && Enum.TryParse<CalendarViewType>(ViewType, true, out var viewType))
        {
            CurrentViewType = viewType;
        }
        else
        {
            CurrentViewType = Settings?.DefaultView ?? CalendarViewType.Month;
        }

        if (Year.HasValue && Month.HasValue)
        {
            if (Day.HasValue)
            {
                CurrentDate = new DateTime(Year.Value, Month.Value, Day.Value);
            }
            else
            {
                CurrentDate = new DateTime(Year.Value, Month.Value, 1);
            }
        }
        else
        {
            CurrentDate = DateTime.Today;
        }
    }

    private async Task LoadEvents()
    {
        if (CurrentAccount == null) return;

        var (startDate, endDate) = GetDateRange();

        try
        {
            Events = await CalendarService.GetEventsAsync(CurrentAccount.Id, startDate, endDate);
        }
        catch
        {
            Events = new List<CalendarEvent>();
        }
    }

    private (DateTime startDate, DateTime endDate) GetDateRange()
    {
        return CurrentViewType switch
        {
            CalendarViewType.Month => GetMonthRange(CurrentDate),
            CalendarViewType.Week => GetWeekRange(CurrentDate),
            CalendarViewType.Day => (CurrentDate.Date, CurrentDate.Date.AddDays(1)),
            _ => GetMonthRange(CurrentDate)
        };
    }

    private (DateTime startDate, DateTime endDate) GetMonthRange(DateTime date)
    {
        var firstDayOfMonth = new DateTime(date.Year, date.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        var startDate = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek + 1);
        var endDate = lastDayOfMonth.AddDays(7 - (int)lastDayOfMonth.DayOfWeek);
        return (startDate, endDate);
    }

    private (DateTime startDate, DateTime endDate) GetWeekRange(DateTime date)
    {
        var daysSinceMonday = (int)date.DayOfWeek - 1;
        if (daysSinceMonday < 0) daysSinceMonday += 7;
        var startDate = date.Date.AddDays(-daysSinceMonday);
        var endDate = startDate.AddDays(7);
        return (startDate, endDate);
    }

    private string GetCurrentDateTitle()
    {
        return CurrentViewType switch
        {
            CalendarViewType.Month => CurrentDate.ToString("MMMM yyyy"),
            CalendarViewType.Week => $"Week of {GetWeekRange(CurrentDate).startDate:MMM d} - {GetWeekRange(CurrentDate).endDate.AddDays(-1):MMM d, yyyy}",
            CalendarViewType.Day => CurrentDate.ToString("dddd, MMMM d, yyyy"),
            _ => CurrentDate.ToString("MMMM yyyy")
        };
    }

    private void SetViewType(CalendarViewType viewType)
    {
        CurrentViewType = viewType;
        UpdateUrl();
    }

    private void NavigateToPrevious()
    {
        CurrentDate = CurrentViewType switch
        {
            CalendarViewType.Month => CurrentDate.AddMonths(-1),
            CalendarViewType.Week => CurrentDate.AddDays(-7),
            CalendarViewType.Day => CurrentDate.AddDays(-1),
            _ => CurrentDate.AddMonths(-1)
        };
        UpdateUrl();
    }

    private void NavigateToNext()
    {
        CurrentDate = CurrentViewType switch
        {
            CalendarViewType.Month => CurrentDate.AddMonths(1),
            CalendarViewType.Week => CurrentDate.AddDays(7),
            CalendarViewType.Day => CurrentDate.AddDays(1),
            _ => CurrentDate.AddMonths(1)
        };
        UpdateUrl();
    }

    private void NavigateToToday()
    {
        CurrentDate = DateTime.Today;
        UpdateUrl();
    }

    private void UpdateUrl()
    {
        var url = CurrentViewType switch
        {
            CalendarViewType.Month => $"/calendar/month/{CurrentDate.Year}/{CurrentDate.Month}",
            CalendarViewType.Week => $"/calendar/week/{CurrentDate.Year}/{CurrentDate.Month}/{CurrentDate.Day}",
            CalendarViewType.Day => $"/calendar/day/{CurrentDate.Year}/{CurrentDate.Month}/{CurrentDate.Day}",
            _ => "/calendar"
        };
        Navigation.NavigateTo(url);
    }

    private void HandleEventClick(CalendarEvent calendarEvent)
    {
        EditEvent(calendarEvent);
    }

    private void HandleDateClick(DateTime date)
    {
        if (CurrentViewType != CalendarViewType.Day)
        {
            CurrentDate = date;
            CurrentViewType = CalendarViewType.Day;
            StateHasChanged();
        }
        else
        {
            CreateNewEventAtTime(date);
        }
    }

    private void HandleTimeSlotClick(DateTime dateTime)
    {
        CreateNewEventAtTime(dateTime);
    }

    private async Task HandleEventDrop((CalendarEvent evt, DateTime newTime) args)
    {
        if (CurrentAccount == null) return;

        var duration = args.evt.EndDateTime - args.evt.StartDateTime;
        args.evt.StartDateTime = args.newTime;
        args.evt.EndDateTime = args.newTime.Add(duration);
        args.evt.ModifiedAt = DateTime.UtcNow;

        try
        {
            await CalendarService.UpdateEventAsync(args.evt);
            await LoadEvents();
        }
        catch
        {
            // Handle error
        }
    }

    private void CreateNewEvent()
    {
        CreateNewEventAtTime(DateTime.Today.AddHours(9));
    }

    private void CreateNewEventAtTime(DateTime startTime)
    {
        EditingEvent = new CalendarEvent
        {
            AccountId = CurrentAccount?.Id ?? 0,
            Title = "",
            StartDateTime = startTime,
            EndDateTime = startTime.AddHours(1),
            Priority = EventPriority.Normal,
            Status = EventStatus.Confirmed,
            Color = "#007bff"
        };

        StartDate = DateOnly.FromDateTime(EditingEvent.StartDateTime);
        StartTime = EditingEvent.StartDateTime.ToString("HH:mm");
        EndDate = DateOnly.FromDateTime(EditingEvent.EndDateTime);
        EndTime = EditingEvent.EndDateTime.ToString("HH:mm");

        ShowEventEditor = true;
    }

    private void EditEvent(CalendarEvent evt)
    {
        EditingEvent = new CalendarEvent
        {
            Id = evt.Id,
            AccountId = evt.AccountId,
            Title = evt.Title,
            Description = evt.Description,
            Location = evt.Location,
            StartDateTime = evt.StartDateTime,
            EndDateTime = evt.EndDateTime,
            IsAllDay = evt.IsAllDay,
            Priority = evt.Priority,
            Status = evt.Status,
            Color = evt.Color
        };

        StartDate = DateOnly.FromDateTime(EditingEvent.StartDateTime);
        StartTime = EditingEvent.StartDateTime.ToString("HH:mm");
        EndDate = DateOnly.FromDateTime(EditingEvent.EndDateTime);
        EndTime = EditingEvent.EndDateTime.ToString("HH:mm");

        ShowEventEditor = true;
    }

    private async Task SaveEvent()
    {
        if (EditingEvent == null || CurrentAccount == null) return;

        try
        {
            if (TimeOnly.TryParse(StartTime, out var startTimeOnly) &&
                TimeOnly.TryParse(EndTime, out var endTimeOnly))
            {
                EditingEvent.StartDateTime = StartDate.ToDateTime(startTimeOnly);
                EditingEvent.EndDateTime = EndDate.ToDateTime(endTimeOnly);
            }

            EditingEvent.ModifiedAt = DateTime.UtcNow;

            if (EditingEvent.Id == 0)
            {
                EditingEvent.CreatedAt = DateTime.UtcNow;
                await CalendarService.CreateEventAsync(EditingEvent);
            }
            else
            {
                await CalendarService.UpdateEventAsync(EditingEvent);
            }

            await LoadEvents();
            CloseEventEditor();
        }
        catch
        {
            // Handle error
        }
    }

    private void CloseEventEditor()
    {
        ShowEventEditor = false;
        EditingEvent = null;
    }

    private void ShowImportExport()
    {
        ShowImportExportModal = true;
    }

    private void CloseImportExport()
    {
        ShowImportExportModal = false;
    }

    private async Task OnImportExportDataChanged()
    {
        await LoadEvents();
        StateHasChanged();
    }
}

<style>
.calendar-container {
    height: calc(100vh - 80px);
}

.calendar-header {
    flex-shrink: 0;
}

.calendar-content {
    min-height: 0;
}
</style>
