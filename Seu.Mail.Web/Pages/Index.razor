@page "/"
@page "/inbox"
@inject IEmailService EmailService
@inject IAccountService AccountService
@inject IUserSettingsService UserSettingsService
@inject IHtmlUtilityService HtmlUtilityService
@inject NavigationManager Navigation
@using Seu.Mail.Core.Enums
@using Seu.Mail.Web.Components

<PageTitle>Inbox - Seu Email</PageTitle>

<div class="email-list-container h-100">
    <!-- Bulk Actions Bar -->
    <EmailBulkActions SelectedEmailIds="selectedEmails"
                      TotalEmailCount="emails.Count"
                      OnMarkAsRead="HandleBulkMarkAsRead"
                      OnMarkAsUnread="HandleBulkMarkAsUnread"
                      OnToggleImportant="HandleBulkToggleImportant"
                      OnArchive="HandleBulkArchive"
                      OnMarkAsSpam="HandleBulkMarkAsSpam"
                      OnDelete="HandleBulkDelete"
                      OnSelectAll="SelectAll"
                      OnClearSelection="ClearSelection" />

    <div class="email-list-header bg-white border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    <i class="fas fa-inbox me-2 text-primary"></i>
                    Inbox
                    @if (emails.Any())
                    {
                        <span class="badge bg-primary ms-2">@UnreadCount</span>
                    }
                </h4>
            </div>
            <div class="email-actions">
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="SelectAll">
                    <i class="fas fa-check-square"></i>
                    @(selectedEmails.Count == emails.Count && emails.Any() ? "Deselect All" : "Select All")
                </button>
                <button class="btn btn-outline-primary btn-sm me-2" @onclick="SyncEmails">
                    <i class="fas fa-sync-alt"></i>
                    Refresh
                </button>
            </div>
        </div>
    </div>

    <div class="email-list-content flex-grow-1 overflow-auto">
        @if (isLoading)
        {
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading emails...</p>
            </div>
        }
        else if (!emails.Any())
        {
            <div class="empty-state text-center p-5">
                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">Your inbox is empty</h5>
                <p class="text-muted">No emails to display</p>
                <button class="btn btn-primary" @onclick="SyncEmails">
                    <i class="fas fa-sync-alt me-2"></i>
                    Sync Emails
                </button>
            </div>
        }
        else
        {
            <div class="email-list">
                @foreach (var email in emails)
                {
                    <EmailListItem Email="email"
                                   IsSelected="selectedEmails.Contains(email.Id)"
                                   IsCompact="userSettings.UseCompactMode"
                                   DisplayMode="userSettings.EmailDisplayMode"
                                   ShowPreview="userSettings.ShowEmailPreview"
                                   UserSettings="userSettings"
                                   OnSelectionChanged="ToggleEmailSelection"
                                   OnEmailClick="ViewEmail"
                                   OnToggleImportant="HandleToggleImportant"
                                   OnToggleRead="HandleToggleRead"
                                   OnArchive="HandleArchive"
                                   OnDelete="HandleDelete"
                                   OnMarkAsSpam="HandleMarkAsSpam"
                                   OnReply="HandleReply"
                                   OnReplyAll="HandleReplyAll"
                                   OnForward="HandleForward"
                                   OnOpen="ViewEmail"
                                   OnOpenNewWindow="HandleOpenNewWindow"
                                   OnRefresh="SyncEmails" />
                }
            </div>

            @if (hasMoreEmails)
            {
                <div class="load-more-container p-3 text-center">
                    <button class="btn btn-outline-primary" @onclick="LoadMoreEmails" disabled="@isLoadingMore">
                        @if (isLoadingMore)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Load More
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<EmailMessage> emails = new();
    private HashSet<int> selectedEmails = new();
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private bool hasMoreEmails = true;
    private int currentPage = 1;
    private int pageSize = 50;
    private UserSettings userSettings = new();

    private int UnreadCount => emails.Count(e => !e.IsRead);

    protected override async Task OnInitializedAsync()
    {
        userSettings = await UserSettingsService.GetUserSettingsAsync();
        pageSize = userSettings.EmailsPerPage;
        await LoadEmails();
    }

    private async Task LoadEmails()
    {
        isLoading = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                emails = await EmailService.GetEmailsAsync(account, "INBOX", pageSize);
                hasMoreEmails = emails.Count == pageSize;
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading emails: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMoreEmails()
    {
        if (isLoadingMore || !hasMoreEmails) return;

        isLoadingMore = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                currentPage++;
                var moreEmails = await EmailService.GetEmailsAsync(account, "INBOX", pageSize);

                if (moreEmails.Any())
                {
                    emails.AddRange(moreEmails);
                    hasMoreEmails = moreEmails.Count == pageSize;
                }
                else
                {
                    hasMoreEmails = false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading more emails: {ex.Message}");
        }
        finally
        {
            isLoadingMore = false;
        }
    }

    private async Task SyncEmails()
    {
        isLoading = true;
        try
        {
            var account = await AccountService.GetDefaultAccountAsync();
            if (account != null)
            {
                var syncResult = await EmailService.SyncEmailsAsync(account);

                if (syncResult.Status == EmailSyncStatus.Success)
                {
                    Console.WriteLine($"Sync successful: {syncResult.NewEmailsCount} new emails downloaded.");
                }
                else
                {
                    Console.WriteLine($"Sync failed: {syncResult.ErrorMessage}");
                }

                await LoadEmails();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error syncing emails: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleEmailSelection(int emailId)
    {
        if (selectedEmails.Contains(emailId))
        {
            selectedEmails.Remove(emailId);
        }
        else
        {
            selectedEmails.Add(emailId);
        }
        StateHasChanged();
    }

    private void SelectAll()
    {
        if (selectedEmails.Count == emails.Count && emails.Any())
        {
            selectedEmails.Clear();
        }
        else
        {
            selectedEmails = emails.Select(e => e.Id).ToHashSet();
        }
        StateHasChanged();
    }

    private void ClearSelection()
    {
        selectedEmails.Clear();
        StateHasChanged();
    }

    // Enhanced action handlers
    private async Task HandleToggleImportant(int emailId)
    {
        try
        {
            await EmailService.ToggleImportantAsync(emailId);
            var email = emails.FirstOrDefault(e => e.Id == emailId);
            if (email != null)
            {
                email.IsImportant = !email.IsImportant;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling importance: {ex.Message}");
        }
    }

    private async Task HandleToggleRead(int emailId)
    {
        try
        {
            var email = emails.FirstOrDefault(e => e.Id == emailId);
            if (email != null)
            {
                if (email.IsRead)
                {
                    await EmailService.MarkAsUnreadAsync(emailId);
                }
                else
                {
                    await EmailService.MarkAsReadAsync(emailId);
                }
                email.IsRead = !email.IsRead;
                StateHasChanged(); // This will update the unread counter immediately
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling read status: {ex.Message}");
        }
    }

    private async Task HandleArchive(int emailId)
    {
        try
        {
            await EmailService.ArchiveEmailAsync(emailId);
            emails.RemoveAll(e => e.Id == emailId);
            selectedEmails.Remove(emailId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error archiving email: {ex.Message}");
        }
    }

    private async Task HandleDelete(int emailId)
    {
        try
        {
            await EmailService.DeleteEmailAsync(emailId);
            emails.RemoveAll(e => e.Id == emailId);
            selectedEmails.Remove(emailId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting email: {ex.Message}");
        }
    }

    private async Task HandleMarkAsSpam(int emailId)
    {
        try
        {
            await EmailService.MarkAsSpamAsync(emailId);
            emails.RemoveAll(e => e.Id == emailId);
            selectedEmails.Remove(emailId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking as spam: {ex.Message}");
        }
    }

    private void HandleReply(int emailId)
    {
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (email != null)
        {
            var replySubject = email.Subject.StartsWith("Re: ") ? email.Subject : $"Re: {email.Subject}";
            Navigation.NavigateTo($"/compose?reply={emailId}&subject={Uri.EscapeDataString(replySubject)}&to={Uri.EscapeDataString(GetSenderEmail(email.From))}");
        }
    }

    private void HandleReplyAll(int emailId)
    {
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (email != null)
        {
            var replySubject = email.Subject.StartsWith("Re: ") ? email.Subject : $"Re: {email.Subject}";
            var allRecipients = new List<string> { GetSenderEmail(email.From) };

            if (!string.IsNullOrEmpty(email.To))
            {
                allRecipients.AddRange(email.To.Split(',').Select(r => r.Trim()));
            }

            var recipients = string.Join(";", allRecipients.Where(r => !string.IsNullOrEmpty(r)).Distinct());
            Navigation.NavigateTo($"/compose?replyall={emailId}&subject={Uri.EscapeDataString(replySubject)}&to={Uri.EscapeDataString(recipients)}");
        }
    }

    private void HandleForward(int emailId)
    {
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (email != null)
        {
            var forwardSubject = email.Subject.StartsWith("Fwd: ") ? email.Subject : $"Fwd: {email.Subject}";
            Navigation.NavigateTo($"/compose?forward={emailId}&subject={Uri.EscapeDataString(forwardSubject)}");
        }
    }

    private void HandleOpenNewWindow(int emailId)
    {
        Navigation.NavigateTo($"/email/{emailId}", forceLoad: true);
    }

    // Bulk action handlers
    private async Task HandleBulkMarkAsRead(List<int> emailIds)
    {
        try
        {
            foreach (var emailId in emailIds)
            {
                await EmailService.MarkAsReadAsync(emailId);
                var email = emails.FirstOrDefault(e => e.Id == emailId);
                if (email != null) email.IsRead = true;
            }
            selectedEmails.Clear();
            StateHasChanged(); // This will update the unread counter immediately
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking emails as read: {ex.Message}");
        }
    }

    private async Task HandleBulkMarkAsUnread(List<int> emailIds)
    {
        try
        {
            foreach (var emailId in emailIds)
            {
                await EmailService.MarkAsUnreadAsync(emailId);
                var email = emails.FirstOrDefault(e => e.Id == emailId);
                if (email != null) email.IsRead = false;
            }
            selectedEmails.Clear();
            StateHasChanged(); // This will update the unread counter immediately
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking emails as unread: {ex.Message}");
        }
    }

    private async Task HandleBulkToggleImportant(List<int> emailIds)
    {
        try
        {
            foreach (var emailId in emailIds)
            {
                await EmailService.ToggleImportantAsync(emailId);
                var email = emails.FirstOrDefault(e => e.Id == emailId);
                if (email != null) email.IsImportant = !email.IsImportant;
            }
            selectedEmails.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling importance: {ex.Message}");
        }
    }

    private async Task HandleBulkArchive(List<int> emailIds)
    {
        try
        {
            foreach (var emailId in emailIds)
            {
                await EmailService.ArchiveEmailAsync(emailId);
            }
            emails.RemoveAll(e => emailIds.Contains(e.Id));
            selectedEmails.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error archiving emails: {ex.Message}");
        }
    }

    private async Task HandleBulkMarkAsSpam(List<int> emailIds)
    {
        try
        {
            foreach (var emailId in emailIds)
            {
                await EmailService.MarkAsSpamAsync(emailId);
            }
            emails.RemoveAll(e => emailIds.Contains(e.Id));
            selectedEmails.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking emails as spam: {ex.Message}");
        }
    }

    private async Task HandleBulkDelete(List<int> emailIds)
    {
        try
        {
            foreach (var emailId in emailIds)
            {
                await EmailService.DeleteEmailAsync(emailId);
            }
            emails.RemoveAll(e => emailIds.Contains(e.Id));
            selectedEmails.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting emails: {ex.Message}");
        }
    }

    private async Task ViewEmail(int emailId)
    {
        var email = emails.FirstOrDefault(e => e.Id == emailId);
        if (userSettings.MarkAsReadOnOpen && email is { IsRead: false })
        {
            await EmailService.MarkAsReadAsync(emailId);
            email.IsRead = true;
            StateHasChanged();
        }

        // Navigate based on user's layout preference
        switch (userSettings.EmailLayoutMode)
        {
            case EmailLayoutMode.SeparatePage:
                Navigation.NavigateTo($"/email/{emailId}");
                break;
            case EmailLayoutMode.SplitRight:
                Navigation.NavigateTo($"/email-split-right/{emailId}");
                break;
            case EmailLayoutMode.SplitBottom:
                Navigation.NavigateTo($"/email-split-bottom/{emailId}");
                break;
            default:
                Navigation.NavigateTo($"/email/{emailId}");
                break;
        }
    }

    private string GetSenderName(string from)
    {
        if (string.IsNullOrEmpty(from)) return "Unknown";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"^(.+?)\s*<");
        if (match.Success)
        {
            return match.Groups[1].Value.Trim('"');
        }

        return from.Split('@')[0];
    }

    private string GetSenderEmail(string from)
    {
        if (string.IsNullOrEmpty(from)) return "";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"<(.+?)>");
        if (match.Success)
        {
            return match.Groups[1].Value;
        }

        return from;
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diff = now - date;

        if (diff.TotalDays < 1 && date.Date == now.Date)
        {
            return date.ToString("HH:mm");
        }
        else if (diff.TotalDays < 7)
        {
            return date.ToString("ddd");
        }
        else if (diff.TotalDays < 365)
        {
            return date.ToString("MMM dd");
        }
        else
        {
            return date.ToString("MMM dd, yyyy");
        }
    }


    private string GetEmailPreview(EmailMessage email)
    {
        var content = !string.IsNullOrEmpty(email.TextBody) ? email.TextBody : email.HtmlBody;
        if (string.IsNullOrEmpty(content)) return "";

        // Remove HTML tags if present
        var preview = System.Text.RegularExpressions.Regex.Replace(content, "<.*?>", "");

        // Limit to 100 characters
        if (preview.Length > 100)
        {
            preview = preview.Substring(0, 100) + "...";
        }

        return preview;
    }

}
