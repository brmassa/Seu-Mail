@page "/settings"
@inject IUserSettingsService UserSettingsService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Settings - Seu Email</PageTitle>

<div class="settings-container h-100">
    <div class="settings-header bg-white border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">
                    <i class="fas fa-cog me-2 text-primary"></i>
                    Settings
                </h4>
                <p class="text-muted mb-0">Customize your email experience</p>
            </div>
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="fas fa-arrow-left me-2"></i>
                Back to Inbox
            </button>
        </div>
    </div>

    <div class="settings-content flex-grow-1 overflow-auto p-4">
        @if (isLoading)
        {
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading settings...</p>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-lg-8 mx-auto">

                    <!-- Email Display Settings -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-list me-2"></i>
                                Email List Display
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">How much information to show in email list:</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="emailDisplay" id="titleOnly"
                                           checked="@(settings.EmailDisplayMode == EmailDisplayMode.TitleOnly)"
                                           @onchange="@(() => UpdateEmailDisplayMode(EmailDisplayMode.TitleOnly))">
                                    <label class="form-check-label" for="titleOnly">
                                        <strong>Title only</strong>
                                        <br><small class="text-muted">Show only email subject line</small>
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="emailDisplay" id="titleSender"
                                           checked="@(settings.EmailDisplayMode == EmailDisplayMode.TitleSender)"
                                           @onchange="@(() => UpdateEmailDisplayMode(EmailDisplayMode.TitleSender))">
                                    <label class="form-check-label" for="titleSender">
                                        <strong>Title + Sender</strong>
                                        <br><small class="text-muted">Show subject line and sender information</small>
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="emailDisplay"
                                           id="titleSenderPreview"
                                           checked="@(settings.EmailDisplayMode == EmailDisplayMode.TitleSenderPreview)"
                                           @onchange="@(() => UpdateEmailDisplayMode(EmailDisplayMode.TitleSenderPreview))">
                                    <label class="form-check-label" for="titleSenderPreview">
                                        <strong>Title + Sender + Preview</strong>
                                        <br><small class="text-muted">Show subject, sender, and body preview (current
                                            default)</small>
                                    </label>
                                </div>
                            </div>

                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="compactMode"
                                       checked="@settings.UseCompactMode"
                                       @onchange="@((e) => UpdateCompactMode((bool)e.Value!))">
                                <label class="form-check-label" for="compactMode">
                                    <strong>Compact mode</strong>
                                    <br><small class="text-muted">Reduce spacing between emails for more dense
                                        display</small>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Email Layout Settings -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-layout me-2"></i>
                                Email Reading Layout
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">How to display emails when reading:</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="emailLayout" id="separatePage"
                                           checked="@(settings.EmailLayoutMode == EmailLayoutMode.SeparatePage)"
                                           @onchange="@(() => UpdateEmailLayoutMode(EmailLayoutMode.SeparatePage))">
                                    <label class="form-check-label" for="separatePage">
                                        <strong>Separate page</strong>
                                        <br><small class="text-muted">Open emails in full page view (current
                                            default)</small>
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="emailLayout" id="splitRight"
                                           checked="@(settings.EmailLayoutMode == EmailLayoutMode.SplitRight)"
                                           @onchange="@(() => UpdateEmailLayoutMode(EmailLayoutMode.SplitRight))">
                                    <label class="form-check-label" for="splitRight">
                                        <strong>Split view - Email on right</strong>
                                        <br><small class="text-muted">Show email list on left, selected email on
                                            right</small>
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="emailLayout" id="splitBottom"
                                           checked="@(settings.EmailLayoutMode == EmailLayoutMode.SplitBottom)"
                                           @onchange="@(() => UpdateEmailLayoutMode(EmailLayoutMode.SplitBottom))">
                                    <label class="form-check-label" for="splitBottom">
                                        <strong>Split view - Email below</strong>
                                        <br><small class="text-muted">Show email list on top, selected email
                                            below</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Email Composition Settings -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-pen me-2"></i>
                                Email Composition
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="defaultSignature" class="form-label">Default Email Signature:</label>
                                <textarea class="form-control" id="defaultSignature" rows="4"
                                          placeholder="Enter your default email signature..."
                                          @bind="settings.DefaultSignature"></textarea>
                                <div class="form-text">This signature will be automatically added to new emails you
                                    compose.
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(settings.DefaultSignature))
                            {
                                <div class="signature-preview">
                                    <label class="form-label">Preview:</label>
                                    <div class="border p-2 rounded bg-light">
                                        <pre class="mb-0 text-muted small">@settings.DefaultSignature</pre>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- General Preferences -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-sliders-h me-2"></i>
                                General Preferences
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="emailsPerPage" class="form-label">Emails per page:</label>
                                        <select class="form-select" id="emailsPerPage" @bind="settings.EmailsPerPage">
                                            <option value="25">25</option>
                                            <option value="50">50</option>
                                            <option value="100">100</option>
                                            <option value="200">200</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" id="markAsReadOnOpen"
                                                   checked="@settings.MarkAsReadOnOpen"
                                                   @onchange="@((e) => settings.MarkAsReadOnOpen = (bool)e.Value!)">
                                            <label class="form-check-label" for="markAsReadOnOpen">
                                                Mark emails as read when opened
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="showEmailPreview"
                                               checked="@settings.ShowEmailPreview"
                                               @onchange="@((e) => settings.ShowEmailPreview = (bool)e.Value!)">
                                        <label class="form-check-label" for="showEmailPreview">
                                            Show email preview in list
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="enableKeyboardNavigation"
                                               checked="@settings.EnableKeyboardNavigation"
                                               @onchange="@((e) => settings.EnableKeyboardNavigation = (bool)e.Value!)">
                                        <label class="form-check-label" for="enableKeyboardNavigation">
                                            Enable keyboard navigation (j/k, arrows)
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="enableHtmlParsing"
                                               checked="@settings.EnableHtmlParsing"
                                               @onchange="@((e) => settings.EnableHtmlParsing = (bool)e.Value!)">
                                        <label class="form-check-label" for="enableHtmlParsing">
                                            Enable HTML parsing for email content
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Save/Reset Actions -->
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-outline-danger" @onclick="ResetToDefaults">
                                    <i class="fas fa-undo me-2"></i>
                                    Reset to Defaults
                                </button>
                                <button class="btn btn-primary" @onclick="SaveSettings">
                                    <i class="fas fa-save me-2"></i>
                                    Save Settings
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Success/Error Toast -->
@if (showToast)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast @(isSuccess ? "bg-success" : "bg-danger") text-white" role="alert">
            <div class="toast-header">
                <i class="fas @(isSuccess ? "fa-check-circle" : "fa-exclamation-circle") me-2"></i>
                <strong class="me-auto">@(isSuccess ? "Success" : "Error")</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="HideToast"></button>
            </div>
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    </div>
}

@code {
    private UserSettings settings = new();
    private bool isLoading = true;
    private bool showToast = false;
    private bool isSuccess = false;
    private string toastMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        isLoading = true;
        try
        {
            settings = await UserSettingsService.GetUserSettingsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings: {ex.Message}");
            ShowToast("Failed to load settings", false);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateEmailDisplayMode(EmailDisplayMode mode)
    {
        settings.EmailDisplayMode = mode;
        await SaveSettingsInternal();
    }

    private async Task UpdateEmailLayoutMode(EmailLayoutMode mode)
    {
        settings.EmailLayoutMode = mode;
        await SaveSettingsInternal();
    }

    private async Task UpdateCompactMode(bool compact)
    {
        settings.UseCompactMode = compact;
        await SaveSettingsInternal();
    }

    private async Task SaveSettings()
    {
        await SaveSettingsInternal();
        ShowToast("Settings saved successfully!", true);
    }

    private async Task SaveSettingsInternal()
    {
        try
        {
            var success = await UserSettingsService.UpdateUserSettingsAsync(settings);
            if (!success)
            {
                ShowToast("Failed to save settings", false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving settings: {ex.Message}");
            ShowToast("Failed to save settings", false);
        }
    }

    private async Task ResetToDefaults()
    {
        try
        {
            var success = await UserSettingsService.ResetToDefaultsAsync();
            if (success)
            {
                await LoadSettings();
                ShowToast("Settings reset to defaults", true);
            }
            else
            {
                ShowToast("Failed to reset settings", false);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error resetting settings: {ex.Message}");
            ShowToast("Failed to reset settings", false);
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private void ShowToast(string message, bool success)
    {
        toastMessage = message;
        isSuccess = success;
        showToast = true;
        StateHasChanged();

        // Auto hide after 3 seconds
        _ = Task.Delay(3000).ContinueWith(async _ =>
        {
            await InvokeAsync(() =>
            {
                showToast = false;
                StateHasChanged();
            });
        });
    }

    private void HideToast()
    {
        showToast = false;
    }

}
