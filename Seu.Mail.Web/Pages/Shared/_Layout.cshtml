<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - Seu Email</title>
    <base href="~/"/>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="~/css/app.css" rel="stylesheet">
</head>
<body>
@RenderBody()

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Blazor JS -->
<script src="_framework/blazor.server.js"></script>

<!-- Email Navigation JS -->
<script src="~/js/email-navigation.js"></script>

<!-- Calendar JS -->
<script src="~/js/calendar.js"></script>

<!-- Custom JavaScript -->
<script>
    // Download file helper
    window.downloadFile = (filename, contentType, content) => {
        const blob = new Blob([new Uint8Array(content)], {type: contentType});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    // Get inner HTML helper
    window.getInnerHtml = (selector) => {
        const element = document.querySelector(selector);
        return element ? element.innerHTML : '';
    };

    // Mobile menu toggle
    window.toggleMobileMenu = () => {
        const sidebar = document.querySelector('.sidebar');
        if (sidebar) {
            sidebar.classList.toggle('show');
        }
    };

    // Auto-hide toasts
    window.autoHideToast = (selector, delay = 5000) => {
        setTimeout(() => {
            const toast = document.querySelector(selector);
            if (toast) {
                const bsToast = new bootstrap.Toast(toast);
                bsToast.hide();
            }
        }, delay);
    };

    // Email navigation JavaScript functions
    window.setupEmailKeyboardNavigation = (dotNetHelper) => {
        // Remove existing event listener if it exists
        if (window.emailKeyboardHandler) {
            document.removeEventListener('keydown', window.emailKeyboardHandler);
        }

        // Create new event handler
        window.emailKeyboardHandler = (event) => {
            // Only handle keys when not in input fields
            if (event.target.tagName === 'INPUT' ||
                event.target.tagName === 'TEXTAREA' ||
                event.target.isContentEditable) {
                return;
            }

            // Prevent default behavior for navigation keys
            const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'KeyJ', 'KeyK', 'Escape'];
            if (navigationKeys.includes(event.code)) {
                event.preventDefault();

                let key = '';
                switch (event.code) {
                    case 'ArrowUp':
                        key = 'arrowup';
                        break;
                    case 'ArrowDown':
                        key = 'arrowdown';
                        break;
                    case 'ArrowLeft':
                        key = 'arrowleft';
                        break;
                    case 'ArrowRight':
                        key = 'arrowright';
                        break;
                    case 'KeyJ':
                        key = 'j';
                        break;
                    case 'KeyK':
                        key = 'k';
                        break;
                    case 'Escape':
                        key = 'escape';
                        break;
                }

                if (key && dotNetHelper) {
                    dotNetHelper.invokeMethodAsync('HandleKeyPress', key);
                }
            }
        };

        // Add the event listener
        document.addEventListener('keydown', window.emailKeyboardHandler);
    };

    // Function to cleanup keyboard navigation when leaving the page
    window.cleanupEmailKeyboardNavigation = () => {
        if (window.emailKeyboardHandler) {
            document.removeEventListener('keydown', window.emailKeyboardHandler);
            window.emailKeyboardHandler = null;
        }
    };

    // Auto-cleanup when navigating away
    window.addEventListener('beforeunload', window.cleanupEmailKeyboardNavigation);

    // Initialize tooltips
    document.addEventListener('DOMContentLoaded', function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

    // Format text in editor
    window.formatText = (command, value = null) => {
        document.execCommand(command, false, value);
    };

    // Close mobile menu when clicking outside
    document.addEventListener('click', function (event) {
        const sidebar = document.querySelector('.sidebar');
        const menuToggle = document.querySelector('.mobile-menu-toggle');

        if (sidebar && sidebar.classList.contains('show')) {
            if (!sidebar.contains(event.target) && !menuToggle.contains(event.target)) {
                sidebar.classList.remove('show');
            }
        }
    });
</script>
</body>
</html>
