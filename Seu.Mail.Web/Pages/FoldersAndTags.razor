@page "/folders-tags"
@inject IFolderTagService FolderTagService
@inject IAccountService AccountService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Folders & Tags - seu</PageTitle>

<div class="folders-tags-container h-100">
    <div class="folders-tags-header bg-white border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-0">
                <i class="fas fa-folder me-2 text-primary"></i>
                Folders & Tags Management
            </h4>
            <div class="btn-group">
                <button class="btn btn-primary" @onclick="ShowCreateFolderModal">
                    <i class="fas fa-folder-plus me-2"></i>
                    New Folder
                </button>
                <button class="btn btn-success" @onclick="ShowCreateTagModal">
                    <i class="fas fa-tag me-2"></i>
                    New Tag
                </button>
                <button class="btn btn-outline-info" @onclick="SyncAllFolders">
                    <i class="fas fa-sync-alt me-2"></i>
                    Sync All
                </button>
            </div>
        </div>
    </div>

    <div class="folders-tags-content flex-grow-1 overflow-auto p-4">
        @if (isLoading)
        {
            <div class="text-center p-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading folders and tags...</p>
            </div>
        }
        else
        {
            <div class="row">
                <!-- Folders Section -->
                <div class="col-lg-6">
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-folder me-2"></i>
                                Email Folders
                                @if (folders.Any())
                                {
                                    <span class="badge bg-primary ms-2">@folders.Count</span>
                                }
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            @if (!folders.Any())
                            {
                                <div class="text-center p-4">
                                    <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
                                    <h6 class="text-muted">No folders found</h6>
                                    <p class="text-muted">Sync your account to see email folders</p>
                                </div>
                            }
                            else
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var folder in folders.OrderBy(f => f.IsSystemFolder ? 0 : 1).ThenBy(f => f.Name))
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <i class="@folder.GetFolderIcon() @folder.GetFolderClass() me-3"></i>
                                                <div>
                                                    <h6 class="mb-0">@folder.GetDisplayName()</h6>
                                                    <small class="text-muted">
                                                        @folder.MessageCount messages
                                                        @if (folder.UnreadCount > 0)
                                                        {
                                                            <span class="badge bg-danger ms-1">@folder.UnreadCount unread</span>
                                                        }
                                                    </small>
                                                </div>
                                            </div>
                                            <div class="btn-group btn-group-sm">
                                                @if (folder.IsSystemFolder)
                                                {
                                                    <span class="badge bg-secondary">System</span>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-outline-primary" @onclick="() => EditFolder(folder)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => DeleteFolder(folder)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                }
                                                <button class="btn btn-outline-info" @onclick="() => SyncFolder(folder)">
                                                    <i class="fas fa-sync-alt"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Tags Section -->
                <div class="col-lg-6">
                    <div class="card h-100">
                        <div class="card-header bg-light">
                            <h5 class="card-title mb-0">
                                <i class="fas fa-tags me-2"></i>
                                Email Tags
                                @if (tags.Any())
                                {
                                    <span class="badge bg-success ms-2">@tags.Count</span>
                                }
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            @if (!tags.Any())
                            {
                                <div class="text-center p-4">
                                    <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                                    <h6 class="text-muted">No tags created</h6>
                                    <p class="text-muted">Create tags to organize your emails</p>
                                </div>
                            }
                            else
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var tag in tags.OrderBy(t => t.Name))
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div class="d-flex align-items-center">
                                                <div class="tag-color-indicator me-3" style="background-color: @tag.Color; width: 16px; height: 16px; border-radius: 50%;"></div>
                                                <div>
                                                    <h6 class="mb-0">@tag.Name</h6>
                                                    @if (!string.IsNullOrEmpty(tag.Description))
                                                    {
                                                        <small class="text-muted">@tag.Description</small>
                                                    }
                                                </div>
                                            </div>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" @onclick="() => EditTag(tag)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteTag(tag)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Create/Edit Folder Modal -->
@if (showFolderModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (editingFolder == null)
                        {
                            <i class="fas fa-folder-plus me-2"></i>
                            @:Create New Folder
                        }
                        else
                        {
                            <i class="fas fa-edit me-2"></i>
                            @:Edit Folder
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideFolderModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@folderModel" OnValidSubmit="@SaveFolder">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Account</label>
                            <select class="form-select" @bind="folderModel.AccountId" required>
                                <option value="0">Select Account</option>
                                @foreach (var account in accounts)
                                {
                                    <option value="@account.Id">@account.GetDisplayName()</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Folder Name <span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="folderModel.Name" placeholder="Enter folder name" required />
                            <ValidationMessage For="@(() => folderModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Display Name</label>
                            <InputText class="form-control" @bind-Value="folderModel.DisplayName" placeholder="Optional display name" />
                            <ValidationMessage For="@(() => folderModel.DisplayName)" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="HideFolderModal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @if (editingFolder == null)
                                {
                                    @:Create Folder
                                }
                                else
                                {
                                    @:Update Folder
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Create/Edit Tag Modal -->
@if (showTagModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (editingTag == null)
                        {
                            <i class="fas fa-tag me-2"></i>
                            @:Create New Tag
                        }
                        else
                        {
                            <i class="fas fa-edit me-2"></i>
                            @:Edit Tag
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideTagModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@tagModel" OnValidSubmit="@SaveTag">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label class="form-label">Account</label>
                            <select class="form-select" @bind="tagModel.AccountId" required>
                                <option value="0">Select Account</option>
                                @foreach (var account in accounts)
                                {
                                    <option value="@account.Id">@account.GetDisplayName()</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Tag Name <span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="tagModel.Name" placeholder="Enter tag name" required />
                            <ValidationMessage For="@(() => tagModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Color</label>
                            <div class="d-flex align-items-center">
                                <input type="color" class="form-control form-control-color me-2" @bind="tagModel.Color" style="width: 60px;" />
                                <InputText class="form-control" @bind-Value="tagModel.Color" placeholder="#007bff" />
                            </div>
                            <ValidationMessage For="@(() => tagModel.Color)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="tagModel.Description" placeholder="Optional description" rows="3" />
                            <ValidationMessage For="@(() => tagModel.Description)" />
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="HideTagModal">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-success" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                @if (editingTag == null)
                                {
                                    @:Create Tag
                                }
                                else
                                {
                                    @:Update Tag
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                        Confirm Delete
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteModal"></button>
                </div>
                <div class="modal-body">
                    @if (deleteType == "folder")
                    {
                        <p>Are you sure you want to delete the folder <strong>@deleteItemName</strong>?</p>
                        <p class="text-warning">This action cannot be undone and may affect email organization.</p>
                    }
                    else if (deleteType == "tag")
                    {
                        <p>Are you sure you want to delete the tag <strong>@deleteItemName</strong>?</p>
                        <p class="text-warning">This will remove the tag from all emails that use it.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        <i class="fas fa-trash me-2"></i>
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Toast Messages -->
@if (showToast)
{
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <strong class="me-auto">@toastTitle</strong>
                <button type="button" class="btn-close" @onclick="() => showToast = false"></button>
            </div>
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    </div>
}

@code {
    private List<EmailFolder> folders = new();
    private List<EmailTag> tags = new();
    private List<EmailAccount> accounts = new();
    private bool isLoading = true;
    private bool isSaving = false;

    // Modal states
    private bool showFolderModal = false;
    private bool showTagModal = false;
    private bool showDeleteModal = false;

    // Models
    private EmailFolder folderModel = new();
    private EmailTag tagModel = new();
    private EmailFolder? editingFolder = null;
    private EmailTag? editingTag = null;

    // Delete confirmation
    private string deleteType = "";
    private string deleteItemName = "";
    private int deleteItemId = 0;

    // Toast properties
    private bool showToast = false;
    private string toastTitle = "";
    private string toastMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            accounts = await AccountService.GetAllAccountsAsync();

            if (accounts.Any())
            {
                folders.Clear();
                tags.Clear();

                foreach (var account in accounts)
                {
                    var accountFolders = await FolderTagService.GetFoldersAsync(account.Id);
                    var accountTags = await FolderTagService.GetTagsAsync(account.Id);

                    folders.AddRange(accountFolders);
                    tags.AddRange(accountTags);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading folders and tags: {ex.Message}");
            ShowToast("Error", "Failed to load folders and tags.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowCreateFolderModal()
    {
        editingFolder = null;
        folderModel = new EmailFolder();
        if (accounts.Any())
        {
            folderModel.AccountId = accounts.First().Id;
        }
        showFolderModal = true;
    }

    private void ShowCreateTagModal()
    {
        editingTag = null;
        tagModel = new EmailTag();
        if (accounts.Any())
        {
            tagModel.AccountId = accounts.First().Id;
        }
        showTagModal = true;
    }

    private void EditFolder(EmailFolder folder)
    {
        editingFolder = folder;
        folderModel = new EmailFolder
        {
            Id = folder.Id,
            AccountId = folder.AccountId,
            Name = folder.Name,
            DisplayName = folder.DisplayName
        };
        showFolderModal = true;
    }

    private void EditTag(EmailTag tag)
    {
        editingTag = tag;
        tagModel = new EmailTag
        {
            Id = tag.Id,
            AccountId = tag.AccountId,
            Name = tag.Name,
            Color = tag.Color,
            Description = tag.Description
        };
        showTagModal = true;
    }

    private void HideFolderModal()
    {
        showFolderModal = false;
        editingFolder = null;
        folderModel = new EmailFolder();
    }

    private void HideTagModal()
    {
        showTagModal = false;
        editingTag = null;
        tagModel = new EmailTag();
    }

    private async Task SaveFolder()
    {
        if (isSaving) return;

        isSaving = true;
        try
        {
            bool success;
            if (editingFolder == null)
            {
                success = await FolderTagService.CreateFolderAsync(folderModel);
                if (success)
                {
                    ShowToast("Success", "Folder created successfully!");
                    await LoadData();
                    HideFolderModal();
                }
                else
                {
                    ShowToast("Error", "Failed to create folder. It may already exist.");
                }
            }
            else
            {
                success = await FolderTagService.UpdateFolderAsync(folderModel);
                if (success)
                {
                    ShowToast("Success", "Folder updated successfully!");
                    await LoadData();
                    HideFolderModal();
                }
                else
                {
                    ShowToast("Error", "Failed to update folder.");
                }
            }
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error saving folder: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task SaveTag()
    {
        if (isSaving) return;

        isSaving = true;
        try
        {
            bool success;
            if (editingTag == null)
            {
                success = await FolderTagService.CreateTagAsync(tagModel);
                if (success)
                {
                    ShowToast("Success", "Tag created successfully!");
                    await LoadData();
                    HideTagModal();
                }
                else
                {
                    ShowToast("Error", "Failed to create tag. It may already exist.");
                }
            }
            else
            {
                success = await FolderTagService.UpdateTagAsync(tagModel);
                if (success)
                {
                    ShowToast("Success", "Tag updated successfully!");
                    await LoadData();
                    HideTagModal();
                }
                else
                {
                    ShowToast("Error", "Failed to update tag.");
                }
            }
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error saving tag: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void DeleteFolder(EmailFolder folder)
    {
        deleteType = "folder";
        deleteItemName = folder.GetDisplayName();
        deleteItemId = folder.Id;
        showDeleteModal = true;
    }

    private void DeleteTag(EmailTag tag)
    {
        deleteType = "tag";
        deleteItemName = tag.Name;
        deleteItemId = tag.Id;
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        deleteType = "";
        deleteItemName = "";
        deleteItemId = 0;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            bool success = false;

            if (deleteType == "folder")
            {
                success = await FolderTagService.DeleteFolderAsync(deleteItemId);
                if (success)
                {
                    ShowToast("Success", "Folder deleted successfully!");
                }
                else
                {
                    ShowToast("Error", "Failed to delete folder. System folders cannot be deleted.");
                }
            }
            else if (deleteType == "tag")
            {
                success = await FolderTagService.DeleteTagAsync(deleteItemId);
                if (success)
                {
                    ShowToast("Success", "Tag deleted successfully!");
                }
                else
                {
                    ShowToast("Error", "Failed to delete tag.");
                }
            }

            if (success)
            {
                await LoadData();
            }

            HideDeleteModal();
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error deleting {deleteType}: {ex.Message}");
        }
    }

    private async Task SyncFolder(EmailFolder folder)
    {
        try
        {
            ShowToast("Info", $"Syncing folder {folder.GetDisplayName()}...");
            var success = await FolderTagService.SyncFoldersFromServerAsync(folder.AccountId);
            if (success)
            {
                ShowToast("Success", "Folder synced successfully!");
                await LoadData();
            }
            else
            {
                ShowToast("Error", "Failed to sync folder.");
            }
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error syncing folder: {ex.Message}");
        }
    }

    private async Task SyncAllFolders()
    {
        try
        {
            ShowToast("Info", "Syncing all folders...");

            foreach (var account in accounts)
            {
                await FolderTagService.SyncFoldersFromServerAsync(account.Id);
            }

            ShowToast("Success", "All folders synced successfully!");
            await LoadData();
        }
        catch (Exception ex)
        {
            ShowToast("Error", $"Error syncing folders: {ex.Message}");
        }
    }

    private void ShowToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        showToast = true;
        StateHasChanged();

        Task.Delay(5000).ContinueWith(_ =>
        {
            showToast = false;
            InvokeAsync(StateHasChanged);
        });
    }
}
