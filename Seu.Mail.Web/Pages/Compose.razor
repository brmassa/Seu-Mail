@page "/compose"
@using System.ComponentModel.DataAnnotations
@inject IEmailService EmailService
@inject IAccountService AccountService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Compose Email - Seu Email</PageTitle>

<div class="compose-container h-100">
    <div class="compose-header bg-white border-bottom p-3">
        <div class="d-flex justify-content-between align-items-center">
            <h4 class="mb-0">
                <i class="fas fa-edit me-2 text-primary"></i>
                Compose Email
            </h4>
            <div class="compose-actions">
                <button class="btn btn-outline-secondary me-2" @onclick="SaveDraft" disabled="@isSending">
                    <i class="fas fa-save"></i>
                    Save Draft
                </button>
                <button class="btn btn-outline-danger me-2" @onclick="DiscardEmail">
                    <i class="fas fa-trash"></i>
                    Discard
                </button>
                <button class="btn btn-primary" @onclick="SendEmail" disabled="@isSending">
                    @if (isSending)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    else
                    {
                        <i class="fas fa-paper-plane me-2"></i>
                    }
                    Send
                </button>
            </div>
        </div>
    </div>

    <div class="compose-form flex-grow-1 overflow-auto">
        <div class="p-4">
            <EditForm Model="@emailModel" OnValidSubmit="@SendEmail">
                <DataAnnotationsValidator />

                <!-- From Account -->
                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label">From:</label>
                    <div class="col-sm-10">
                        <select class="form-select" @bind="selectedAccountId">
                            @foreach (var account in accounts)
                            {
                                <option value="@account.Id">
                                    @account.DisplayName (@account.Email)
                                </option>
                            }
                        </select>
                    </div>
                </div>

                <!-- To Recipients -->
                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label">To:</label>
                    <div class="col-sm-10">
                        <input type="email" class="form-control" @bind="emailModel.To"
                               placeholder="recipient@example.com" multiple>
                        <ValidationMessage For="@(() => emailModel.To)" />
                        <div class="form-text">Separate multiple recipients with semicolons</div>
                    </div>
                </div>

                <!-- Cc Recipients -->
                @if (showCc || !string.IsNullOrEmpty(emailModel.Cc))
                {
                    <div class="row mb-3">
                        <label class="col-sm-2 col-form-label">Cc:</label>
                        <div class="col-sm-10">
                            <input type="email" class="form-control" @bind="emailModel.Cc"
                                   placeholder="cc@example.com" multiple>
                            <div class="form-text">Separate multiple recipients with semicolons</div>
                        </div>
                    </div>
                }

                <!-- Bcc Recipients -->
                @if (showBcc || !string.IsNullOrEmpty(emailModel.Bcc))
                {
                    <div class="row mb-3">
                        <label class="col-sm-2 col-form-label">Bcc:</label>
                        <div class="col-sm-10">
                            <input type="email" class="form-control" @bind="emailModel.Bcc"
                                   placeholder="bcc@example.com" multiple>
                            <div class="form-text">Separate multiple recipients with semicolons</div>
                        </div>
                    </div>
                }

                <!-- Show Cc/Bcc Links -->
                @if (!showCc || !showBcc)
                {
                    <div class="row mb-3">
                        <div class="col-sm-10 offset-sm-2">
                            @if (!showCc)
                            {
                                <a href="#" @onclick="() => showCc = true" @onclick:preventDefault="true" class="me-3">
                                    <i class="fas fa-plus-circle me-1"></i>Cc
                                </a>
                            }
                            @if (!showBcc)
                            {
                                <a href="#" @onclick="() => showBcc = true" @onclick:preventDefault="true">
                                    <i class="fas fa-plus-circle me-1"></i>Bcc
                                </a>
                            }
                        </div>
                    </div>
                }

                <!-- Subject -->
                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label">Subject:</label>
                    <div class="col-sm-10">
                        <input type="text" class="form-control" @bind="emailModel.Subject"
                               placeholder="Email subject">
                        <ValidationMessage For="@(() => emailModel.Subject)" />
                    </div>
                </div>

                <!-- Attachments -->
                @if (attachments.Any())
                {
                    <div class="row mb-3">
                        <label class="col-sm-2 col-form-label">Attachments:</label>
                        <div class="col-sm-10">
                            <div class="attachments-list">
                                @foreach (var attachment in attachments)
                                {
                                    <div class="attachment-item d-flex align-items-center p-2 border rounded mb-2">
                                        <div class="attachment-icon me-2">
                                            <i class="fas @GetFileIcon(attachment.ContentType) text-primary"></i>
                                        </div>
                                        <div class="attachment-info flex-grow-1">
                                            <div class="attachment-name small fw-bold">@attachment.FileName</div>
                                            <div class="attachment-size text-muted small">@FormatFileSize(attachment.Size)</div>
                                        </div>
                                        <button type="button" class="btn btn-outline-danger btn-sm"
                                                @onclick="() => RemoveAttachment(attachment)">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Add Attachment -->
                <div class="row mb-3">
                    <div class="col-sm-10 offset-sm-2">
                        <InputFile OnChange="HandleFileSelection" multiple class="form-control" accept="*/*" />
                        <div class="form-text">Maximum file size: 25MB per file</div>
                    </div>
                </div>

                <!-- Email Body -->
                <div class="row mb-3">
                    <label class="col-sm-2 col-form-label">Message:</label>
                    <div class="col-sm-10">
                        <!-- Format Toggle -->
                        <div class="btn-group btn-group-sm mb-2" role="group">
                            <input type="radio" class="btn-check" name="format" id="text-format"
                                   @onchange="() => isHtmlMode = false" checked="@(!isHtmlMode)">
                            <label class="btn btn-outline-secondary" for="text-format">
                                <i class="fas fa-align-left me-1"></i>Text
                            </label>

                            <input type="radio" class="btn-check" name="format" id="html-format"
                                   @onchange="() => isHtmlMode = true" checked="@isHtmlMode">
                            <label class="btn btn-outline-secondary" for="html-format">
                                <i class="fas fa-code me-1"></i>HTML
                            </label>
                        </div>

                        @if (isHtmlMode)
                        {
                            <!-- HTML Formatting Toolbar -->
                            <div class="formatting-toolbar mb-2">
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="@(() => ApplyFormat("bold"))">
                                        <i class="fas fa-bold"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="@(() => ApplyFormat("italic"))">
                                        <i class="fas fa-italic"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="@(() => ApplyFormat("underline"))">
                                        <i class="fas fa-underline"></i>
                                    </button>
                                </div>
                                <div class="btn-group btn-group-sm ms-2" role="group">
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="@(() => ApplyFormat("insertUnorderedList"))">
                                        <i class="fas fa-list-ul"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary"
                                            @onclick="@(() => ApplyFormat("insertOrderedList"))">
                                        <i class="fas fa-list-ol"></i>
                                    </button>
                                </div>
                            </div>

                            <div class="email-editor" contenteditable="true"
                                 @oninput="OnBodyInput" @onblur="OnBodyBlur"
                                 style="min-height: 300px; border: 1px solid #ced4da; border-radius: 0.375rem; padding: 0.75rem;">
                                @((MarkupString)emailModel.Body)
                            </div>
                        }
                        else
                        {
                            <textarea class="form-control" @bind="emailModel.Body" rows="15"
                                      placeholder="Type your message here..."></textarea>
                        }
                        <ValidationMessage For="@(() => emailModel.Body)" />
                    </div>
                </div>

                <!-- Signature -->
                @if (!string.IsNullOrEmpty(signature))
                {
                    <div class="row mb-3">
                        <div class="col-sm-10 offset-sm-2">
                            <div class="signature border-top pt-3 mt-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="includeSignature" id="includeSignature">
                                    <label class="form-check-label" for="includeSignature">
                                        Include signature
                                    </label>
                                </div>
                                @if (includeSignature)
                                {
                                    <div class="signature-preview mt-2 p-2 bg-light rounded">
                                        <small class="text-muted">@((MarkupString)signature)</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

            </EditForm>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (showMessage)
{
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <strong class="me-auto">@messageTitle</strong>
                <button type="button" class="btn-close" @onclick="() => showMessage = false"></button>
            </div>
            <div class="toast-body">
                @messageContent
            </div>
        </div>
    </div>
}

@code {
    [Parameter] [SupplyParameterFromQuery] public int? Reply { get; set; }
    [Parameter] [SupplyParameterFromQuery] public int? ReplyAll { get; set; }
    [Parameter] [SupplyParameterFromQuery] public int? Forward { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? To { get; set; }
    [Parameter] [SupplyParameterFromQuery] public string? Subject { get; set; }

    private ComposeEmailModel emailModel = new();
    private List<EmailAccount> accounts = new();
    private int selectedAccountId;
    private List<EmailAttachmentModel> attachments = new();
    private bool isHtmlMode = false;
    private bool showCc = false;
    private bool showBcc = false;
    private bool includeSignature = true;
    private string signature = "";
    private bool isSending = false;

    // Message display
    private bool showMessage = false;
    private string messageTitle = "";
    private string messageContent = "";

    public class ComposeEmailModel
    {
        [Required]
        [EmailAddress]
        public string To { get; set; } = "";

        public string? Cc { get; set; }
        public string? Bcc { get; set; }

        [Required]
        public string Subject { get; set; } = "";

        [Required]
        public string Body { get; set; } = "";
    }

    public class EmailAttachmentModel
    {
        public string FileName { get; set; } = "";
        public string ContentType { get; set; } = "";
        public long Size { get; set; }
        public byte[] Content { get; set; } = Array.Empty<byte>();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
        await LoadEmailData();
    }

    private async Task LoadAccounts()
    {
        accounts = await AccountService.GetAllAccountsAsync();
        var defaultAccount = await AccountService.GetDefaultAccountAsync();
        if (defaultAccount != null)
        {
            selectedAccountId = defaultAccount.Id;
            signature = $"<br><br>--<br>{defaultAccount.DisplayName}<br>{defaultAccount.Email}";
        }
    }

    private async Task LoadEmailData()
    {
        // Pre-fill form based on query parameters
        if (!string.IsNullOrEmpty(To))
        {
            emailModel.To = Uri.UnescapeDataString(To);
        }

        if (!string.IsNullOrEmpty(Subject))
        {
            emailModel.Subject = Uri.UnescapeDataString(Subject);
        }

        // Load original email for reply/forward
        if (Reply.HasValue)
        {
            await LoadReplyData(Reply.Value);
        }
        else if (ReplyAll.HasValue)
        {
            await LoadReplyAllData(ReplyAll.Value);
        }
        else if (Forward.HasValue)
        {
            await LoadForwardData(Forward.Value);
        }
    }

    private async Task LoadReplyData(int originalEmailId)
    {
        var originalEmail = await EmailService.GetEmailByIdAsync(originalEmailId);
        if (originalEmail != null)
        {
            emailModel.To = GetSenderEmail(originalEmail.From);
            emailModel.Subject = originalEmail.Subject.StartsWith("Re: ") ? originalEmail.Subject : $"Re: {originalEmail.Subject}";
            emailModel.Body = CreateReplyBody(originalEmail);
        }
    }

    private async Task LoadReplyAllData(int originalEmailId)
    {
        var originalEmail = await EmailService.GetEmailByIdAsync(originalEmailId);
        if (originalEmail != null)
        {
            var recipients = new List<string> { GetSenderEmail(originalEmail.From) };

            if (!string.IsNullOrEmpty(originalEmail.Cc))
            {
                recipients.AddRange(originalEmail.Cc.Split(';').Select(cc => cc.Trim()));
            }

            emailModel.To = string.Join(";", recipients.Where(r => !string.IsNullOrEmpty(r)));
            emailModel.Subject = originalEmail.Subject.StartsWith("Re: ") ? originalEmail.Subject : $"Re: {originalEmail.Subject}";
            emailModel.Body = CreateReplyBody(originalEmail);
        }
    }

    private async Task LoadForwardData(int originalEmailId)
    {
        var originalEmail = await EmailService.GetEmailByIdAsync(originalEmailId);
        if (originalEmail != null)
        {
            emailModel.Subject = originalEmail.Subject.StartsWith("Fwd: ") ? originalEmail.Subject : $"Fwd: {originalEmail.Subject}";
            emailModel.Body = CreateForwardBody(originalEmail);
        }
    }

    private string CreateReplyBody(EmailMessage originalEmail)
    {
        var originalBody = !string.IsNullOrEmpty(originalEmail.HtmlBody) ? originalEmail.HtmlBody : originalEmail.TextBody;
        return $"<br><br>On {originalEmail.DateReceived:MMM dd, yyyy 'at' HH:mm}, {GetSenderName(originalEmail.From)} wrote:<br><blockquote>{originalBody}</blockquote>";
    }

    private string CreateForwardBody(EmailMessage originalEmail)
    {
        var originalBody = !string.IsNullOrEmpty(originalEmail.HtmlBody) ? originalEmail.HtmlBody : originalEmail.TextBody;
        return $"<br><br>---------- Forwarded message ----------<br><strong>From:</strong> {originalEmail.From}<br><strong>Date:</strong> {originalEmail.DateReceived:MMM dd, yyyy 'at' HH:mm}<br><strong>Subject:</strong> {originalEmail.Subject}<br><strong>To:</strong> {originalEmail.To}<br><br>{originalBody}";
    }

    private async Task SendEmail()
    {
        if (isSending) return;

        isSending = true;
        try
        {
            var account = accounts.FirstOrDefault(a => a.Id == selectedAccountId);
            if (account == null)
            {
                ShowMessage("Error", "No account selected.");
                return;
            }

            var body = emailModel.Body;
            if (includeSignature && !string.IsNullOrEmpty(signature))
            {
                body += signature;
            }

            var toEmails = emailModel.To.Split(';').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).ToList();
            var ccEmails = !string.IsNullOrEmpty(emailModel.Cc) ? string.Join(",", emailModel.Cc.Split(';').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e))) : null;
            var bccEmails = !string.IsNullOrEmpty(emailModel.Bcc) ? string.Join(",", emailModel.Bcc.Split(';').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e))) : null;

            var success = await EmailService.SendEmailAsync(
                account,
                toEmails.First(),
                emailModel.Subject,
                body,
                isHtmlMode,
                ccEmails,
                bccEmails
            );

            if (success)
            {
                ShowMessage("Success", "Email sent successfully!");
                await Task.Delay(2000);
                Navigation.NavigateTo("/");
            }
            else
            {
                ShowMessage("Error", "Failed to send email. Please check your account settings.");
            }
        }
        catch (Exception ex)
        {
            ShowMessage("Error", $"Error sending email: {ex.Message}");
        }
        finally
        {
            isSending = false;
        }
    }

    private void SaveDraft()
    {
        // TODO: Implement save draft functionality
        ShowMessage("Info", "Draft saved feature coming soon!");
    }

    private void DiscardEmail()
    {
        Navigation.NavigateTo("/");
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        const long maxFileSize = 25 * 1024 * 1024; // 25MB

        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > maxFileSize)
            {
                ShowMessage("Error", $"File {file.Name} is too large. Maximum size is 25MB.");
                continue;
            }

            try
            {
                using var stream = new MemoryStream();
                await file.OpenReadStream(maxFileSize).CopyToAsync(stream);

                var attachment = new EmailAttachmentModel
                {
                    FileName = file.Name,
                    ContentType = file.ContentType,
                    Size = file.Size,
                    Content = stream.ToArray()
                };

                attachments.Add(attachment);
            }
            catch (Exception ex)
            {
                ShowMessage("Error", $"Error uploading {file.Name}: {ex.Message}");
            }
        }
    }

    private void RemoveAttachment(EmailAttachmentModel attachment)
    {
        attachments.Remove(attachment);
    }

    private async Task ApplyFormat(string command)
    {
        await JSRuntime.InvokeVoidAsync("document.execCommand", command, false, null);
    }

    private async Task OnBodyInput(ChangeEventArgs e)
    {
        if (isHtmlMode)
        {
            emailModel.Body = await JSRuntime.InvokeAsync<string>("getInnerHtml", ".email-editor");
        }
    }

    private async Task OnBodyBlur(FocusEventArgs e)
    {
        if (isHtmlMode)
        {
            emailModel.Body = await JSRuntime.InvokeAsync<string>("getInnerHtml", ".email-editor");
        }
    }

    private string GetSenderName(string from)
    {
        if (string.IsNullOrEmpty(from)) return "Unknown";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"^(.+?)\s*<");
        if (match.Success)
        {
            return match.Groups[1].Value.Trim('"');
        }

        return from.Split('@')[0];
    }

    private string GetSenderEmail(string from)
    {
        if (string.IsNullOrEmpty(from)) return "";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"<(.+?)>");
        if (match.Success)
        {
            return match.Groups[1].Value;
        }

        return from;
    }

    private string GetFileIcon(string contentType)
    {
        if (string.IsNullOrEmpty(contentType)) return "fa-file";

        return contentType.ToLower() switch
        {
            var type when type.StartsWith("image/") => "fa-file-image",
            var type when type.StartsWith("video/") => "fa-file-video",
            var type when type.StartsWith("audio/") => "fa-file-audio",
            "application/pdf" => "fa-file-pdf",
            var type when type.Contains("word") => "fa-file-word",
            var type when type.Contains("excel") || type.Contains("spreadsheet") => "fa-file-excel",
            var type when type.Contains("powerpoint") || type.Contains("presentation") => "fa-file-powerpoint",
            var type when type.Contains("zip") || type.Contains("compressed") => "fa-file-archive",
            _ => "fa-file"
        };
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024 * 1024):F1} MB";
        return $"{bytes / (1024 * 1024 * 1024):F1} GB";
    }

    private void ShowMessage(string title, string content)
    {
        messageTitle = title;
        messageContent = content;
        showMessage = true;
        StateHasChanged();

        Task.Delay(5000).ContinueWith(_ =>
        {
            showMessage = false;
            InvokeAsync(StateHasChanged);
        });
    }
}
