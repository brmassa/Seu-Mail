@page "/email/{EmailId:int}"
@inject IEmailService EmailService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IAccountService AccountService
@inject IUserSettingsService UserSettingsService
@inject IHtmlUtilityService HtmlUtilityService
@implements IDisposable

<PageTitle>@(HtmlUtilityService.StripHtml(email?.Subject ?? "") ?? "Email") - Seu Email</PageTitle>

<div class="email-view-container h-100">
    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading email...</p>
        </div>
    }
    else if (email == null)
    {
        <div class="text-center p-5">
            <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
            <h5>Email not found</h5>
            <p class="text-muted">The requested email could not be found.</p>
            <button class="btn btn-primary" @onclick="GoBack">
                <i class="fas fa-arrow-left me-2"></i>
                Go Back
            </button>
        </div>
    }
    else
    {
        <!-- Email Header -->
        <div class="email-header bg-white border-bottom p-3">
            <div class="d-flex justify-content-between align-items-start mb-3">
                <div class="email-actions">
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="GoBack">
                        <i class="fas fa-arrow-left"></i>
                        Back
                    </button>
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PreviousEmail"
                            disabled="@(!hasPrevious)">
                        <i class="fas fa-chevron-left"></i>
                        Previous
                    </button>
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="NextEmail" disabled="@(!hasNext)">
                        <i class="fas fa-chevron-right"></i>
                        Next
                    </button>
                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="ReplyEmail">
                        <i class="fas fa-reply"></i>
                        Reply
                    </button>
                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="ReplyAllEmail">
                        <i class="fas fa-reply-all"></i>
                        Reply All
                    </button>
                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="ForwardEmail">
                        <i class="fas fa-share"></i>
                        Forward
                    </button>
                </div>
                <div class="email-meta-actions">
                    <button class="btn btn-outline-primary btn-sm me-2" @onclick="PrintEmail" title="Print email">
                        <i class="fas fa-print"></i>
                        Print
                    </button>
                </div>
            </div>

            <div class="email-subject mb-3">
                <h5 class="mb-0">@HtmlUtilityService.StripHtml(email.Subject)</h5>
            </div>

            <!-- Dedicated Action Bar -->
            <div class="email-actions-bar mb-3 d-flex justify-content-start gap-2">
                <button class="btn btn-outline-warning btn-sm" @onclick="ToggleImportant"
                        title="@(email.IsImportant ? "Remove from important" : "Mark as important")">
                    <i class="fas fa-star @(email.IsImportant ? "text-warning" : "")"></i>
                    @(email.IsImportant ? "Unstar" : "Star")
                </button>
                <button class="btn btn-outline-danger btn-sm" @onclick="DeleteEmail" title="Delete email">
                    <i class="fas fa-trash"></i>
                    Delete
                </button>
            </div>

            <div class="email-details">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="sender-info">
                        <strong>From:</strong>
                        <span class="ms-2">@GetSenderName(email.From) &lt;@GetSenderEmail(email.From)&gt;</span>
                    </div>
                    <div class="email-date">
                        <i class="fas fa-clock me-1"></i>
                        @email.DateReceived.ToString("MMM dd, yyyy 'at' HH:mm")
                    </div>
                </div>

                <div class="collapse @(showEmailDetails ? "show" : "")" id="emailDetailsCollapse">
                    <div class="additional-details">
                        <div class="recipient-info mb-2">
                            <strong>To:</strong>
                            <span class="ms-2">@email.To</span>
                        </div>
                        @if (!string.IsNullOrEmpty(email.Cc))
                        {
                            <div class="cc-info mb-2">
                                <strong>Cc:</strong>
                                <span class="ms-2">@email.Cc</span>
                            </div>
                        }
                        @if (email.HasAttachments && email.Attachments.Any())
                        {
                            <div class="attachments-info mb-2">
                                <i class="fas fa-paperclip me-1"></i>
                                @email.Attachments.Count attachment@(email.Attachments.Count > 1 ? "s" : "")
                            </div>
                        }
                    </div>
                </div>

                <button class="btn btn-link btn-sm p-0 text-decoration-none"
                        @onclick="ToggleEmailDetails"
                        type="button">
                    <i class="fas fa-chevron-@(showEmailDetails ? "up" : "down") me-1"></i>
                    @(showEmailDetails ? "Hide" : "Show") details
                </button>
            </div>

            @if (userSettings != null && userSettings.EnableKeyboardNavigation)
            {
                <div class="keyboard-shortcuts-hint text-muted small mt-2">
                    <i class="fas fa-keyboard me-1"></i>
                    Use <kbd>j</kbd>/<kbd>k</kbd> or <kbd>↓</kbd>/<kbd>↑</kbd> for next/previous, <kbd>Esc</kbd> to go
                    back
                </div>
            }
        </div>

        <!-- Email Content -->
        <div class="email-content flex-grow-1 d-flex flex-column" style="min-height: 0;">
            <!-- Content type toggle for HTML emails -->
            @if (!string.IsNullOrEmpty(email.HtmlBody) && userSettings?.EnableHtmlParsing == false)
            {
                <div class="email-content-controls bg-light border-bottom p-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <small class="text-muted">HTML email - showing text version</small>
                        <button class="btn btn-outline-primary btn-sm" @onclick="ToggleHtmlView">
                            <i class="fas fa-@(showHtmlForThisEmail ? "file-alt" : "code")"></i>
                            @(showHtmlForThisEmail ? "Show Text" : "Show HTML")
                        </button>
                    </div>
                </div>
            }

            <div class="email-body p-4 flex-grow-1 overflow-auto">
                @{
                    var hasHtmlContent = !string.IsNullOrEmpty(email.HtmlBody);
                    var hasTextContent = !string.IsNullOrEmpty(email.TextBody);
                    var shouldShowHtml = userSettings?.EnableHtmlParsing == true || showHtmlForThisEmail;
                }

                @if (hasHtmlContent || hasTextContent)
                {
                    @if (hasHtmlContent && shouldShowHtml)
                    {
                        <div class="html-content">
                            @((MarkupString)HtmlUtilityService.SanitizeHtml(email.HtmlBody ?? ""))
                        </div>
                    }
                    else if (hasHtmlContent)
                    {
                        <div class="text-content">
                            @{
                                var convertedText = HtmlUtilityService.ConvertHtmlToText(email.HtmlBody ?? "", true);
                                // Debug: Check if conversion resulted in empty content
                                if (string.IsNullOrWhiteSpace(convertedText))
                                {
                                    convertedText = HtmlUtilityService.StripHtml(email.HtmlBody ?? "");
                                }

                                // Final fallback if still empty
                                if (string.IsNullOrWhiteSpace(convertedText))
                                {
                                    convertedText = "Email content could not be displayed in text format. Please enable HTML view.";
                                }
                            }
                            <pre style="white-space: pre-wrap; font-family: inherit; margin: 0;">@convertedText</pre>
                        </div>
                    }
                    else if (hasTextContent)
                    {
                        <pre class="text-content"
                             style="white-space: pre-wrap; font-family: inherit; margin: 0;">@email.TextBody</pre>
                    }
                }
                else
                {
                    <p class="text-muted fst-italic">This email has no content.</p>
                }
            </div>

            <!-- Attachments -->
            @if (email.HasAttachments && email.Attachments.Any())
            {
                <div class="attachments-section bg-light border-top p-3">
                    <h6 class="mb-3">
                        <i class="fas fa-paperclip me-2"></i>
                        Attachments (@email.Attachments.Count)
                    </h6>
                    <div class="row">
                        @foreach (var attachment in email.Attachments)
                        {
                            <div class="col-md-6 col-lg-4 mb-2">
                                <div class="attachment-item d-flex align-items-center p-2 border rounded">
                                    <div class="attachment-icon me-2">
                                        <i class="fas @GetFileIcon(attachment.ContentType) fa-2x text-primary"></i>
                                    </div>
                                    <div class="attachment-info flex-grow-1">
                                        <div class="attachment-name small fw-bold">@attachment.FileName</div>
                                        <div
                                            class="attachment-size text-muted small">@FormatFileSize(attachment.Size)</div>
                                    </div>
                                    <button class="btn btn-outline-primary btn-sm"
                                            @onclick="() => DownloadAttachment(attachment)">
                                        <i class="fas fa-download"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public int EmailId { get; set; }

    private EmailMessage? email;
    private bool isLoading = true;
    private List<int> emailIds = new();
    private int currentIndex = -1;
    private bool hasPrevious => currentIndex > 0;
    private bool hasNext => currentIndex >= 0 && currentIndex < emailIds.Count - 1;
    private DotNetObjectReference<EmailView>? objRef;
    private UserSettings? userSettings;
    private bool showEmailDetails = false;
    private bool showHtmlForThisEmail = false;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        userSettings = await UserSettingsService.GetUserSettingsAsync();
        await LoadEmailIds();
        await LoadEmail();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (EmailId > 0)
        {
            // Update current index when EmailId changes
            currentIndex = emailIds.IndexOf(EmailId);
            if (currentIndex == -1)
            {
                // If EmailId not found in current list, reload the list
                await LoadEmailIds();
            }

            await LoadEmail();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && userSettings != null && userSettings.EnableKeyboardNavigation)
        {
            await SetupKeyboardNavigation();
        }
    }

    private async Task LoadEmail()
    {
        isLoading = true;
        try
        {
            email = await EmailService.GetEmailByIdAsync(EmailId);
            if (email is { IsRead: false })
            {
                await EmailService.MarkAsReadAsync(EmailId);
                email.IsRead = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading email: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmailIds()
    {
        try
        {
            var account = await GetDefaultAccount();
            if (account != null)
            {
                // Get the list of email IDs from the inbox for navigation
                var allEmails = await EmailService.GetEmailsAsync(account, "INBOX", 1000);
                emailIds = allEmails.Select(e => e.Id).ToList();
                currentIndex = emailIds.IndexOf(EmailId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading email IDs: {ex.Message}");
        }
    }

    private async Task<EmailAccount?> GetDefaultAccount()
    {
        return await AccountService.GetDefaultAccountAsync();
    }

    private async Task SetupKeyboardNavigation()
    {
        await JSRuntime.InvokeVoidAsync("setupEmailKeyboardNavigation", objRef);
    }

    private void GoBack()
    {
        try
        {
            Navigation.NavigateTo("/");
        }
        catch (TaskCanceledException)
        {
            // Ignore navigation cancellation exceptions
        }
    }

    private void PreviousEmail()
    {
        if (hasPrevious)
        {
            var previousId = emailIds[currentIndex - 1];
            try
            {
                Navigation.NavigateTo($"/email/{previousId}");
            }
            catch (TaskCanceledException)
            {
                // Ignore navigation cancellation exceptions
            }
        }
    }

    private void NextEmail()
    {
        if (hasNext)
        {
            var nextId = emailIds[currentIndex + 1];
            try
            {
                Navigation.NavigateTo($"/email/{nextId}");
            }
            catch (TaskCanceledException)
            {
                // Ignore navigation cancellation exceptions
            }
        }
    }

    [JSInvokable]
    public void HandleKeyPress(string key)
    {
        switch (key.ToLower())
        {
            case "j":
            case "arrowdown":
                NextEmail();
                break;
            case "k":
            case "arrowup":
                PreviousEmail();
                break;
            case "arrowleft":
                PreviousEmail();
                break;
            case "arrowright":
                NextEmail();
                break;
            case "escape":
                GoBack();
                break;
        }
    }

    private void ReplyEmail()
    {
        if (email != null)
        {
            var replySubject = email.Subject.StartsWith("Re: ") ? email.Subject : $"Re: {email.Subject}";
            try
            {
                Navigation.NavigateTo($"/compose?reply={EmailId}&subject={Uri.EscapeDataString(replySubject)}&to={Uri.EscapeDataString(GetSenderEmail(email.From))}");
            }
            catch (TaskCanceledException)
            {
                // Ignore navigation cancellation exceptions
            }
        }
    }

    private void ReplyAllEmail()
    {
        if (email != null)
        {
            var replySubject = email.Subject.StartsWith("Re: ") ? email.Subject : $"Re: {email.Subject}";
            var allRecipients = new List<string> { GetSenderEmail(email.From) };

            if (!string.IsNullOrEmpty(email.Cc))
            {
                allRecipients.AddRange(email.Cc.Split(';').Select(cc => cc.Trim()));
            }

            var recipients = string.Join(";", allRecipients.Distinct());
            try
            {
                Navigation.NavigateTo($"/compose?replyall={EmailId}&subject={Uri.EscapeDataString(replySubject)}&to={Uri.EscapeDataString(recipients)}");
            }
            catch (TaskCanceledException)
            {
                // Ignore navigation cancellation exceptions
            }
        }
    }

    private void ForwardEmail()
    {
        if (email != null)
        {
            var forwardSubject = email.Subject.StartsWith("Fwd: ") ? email.Subject : $"Fwd: {email.Subject}";
            try
            {
                Navigation.NavigateTo($"/compose?forward={EmailId}&subject={Uri.EscapeDataString(forwardSubject)}");
            }
            catch (TaskCanceledException)
            {
                // Ignore navigation cancellation exceptions
            }
        }
    }


    private async Task DownloadAttachment(EmailAttachment attachment)
    {
        if (attachment.Content != null)
        {
            var fileName = attachment.FileName;
            var contentType = attachment.ContentType;

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, contentType, attachment.Content);
        }
    }

    private string GetSenderName(string from)
    {
        if (string.IsNullOrEmpty(from)) return "Unknown";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"^(.+?)\s*<");
        if (match.Success)
        {
            return match.Groups[1].Value.Trim('"');
        }

        return from.Split('@')[0];
    }

    private string GetSenderEmail(string from)
    {
        if (string.IsNullOrEmpty(from)) return "";

        var match = System.Text.RegularExpressions.Regex.Match(from, @"<(.+?)>");
        if (match.Success)
        {
            return match.Groups[1].Value;
        }

        return from;
    }

    private string SanitizeHtml(string html)
    {
        // Basic HTML sanitization - in production, use a proper HTML sanitizer
        if (string.IsNullOrEmpty(html)) return "";

        // Remove potentially dangerous tags and attributes
        var sanitized = System.Text.RegularExpressions.Regex.Replace(html, @"<script[^>]*>.*?</script>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.Singleline);
        sanitized = System.Text.RegularExpressions.Regex.Replace(sanitized, @"<link[^>]*>", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        sanitized = System.Text.RegularExpressions.Regex.Replace(sanitized, @"on\w+\s*=\s*[""'][^""']*[""']", "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

        return sanitized;
    }

    private string GetFileIcon(string contentType)
    {
        if (string.IsNullOrEmpty(contentType)) return "fa-file";

        return contentType.ToLower() switch
        {
            var type when type.StartsWith("image/") => "fa-file-image",
            var type when type.StartsWith("video/") => "fa-file-video",
            var type when type.StartsWith("audio/") => "fa-file-audio",
            "application/pdf" => "fa-file-pdf",
            var type when type.Contains("word") => "fa-file-word",
            var type when type.Contains("excel") || type.Contains("spreadsheet") => "fa-file-excel",
            var type when type.Contains("powerpoint") || type.Contains("presentation") => "fa-file-powerpoint",
            var type when type.Contains("zip") || type.Contains("compressed") => "fa-file-archive",
            _ => "fa-file"
        };
    }

    private string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024 * 1024):F1} MB";
        return $"{bytes / (1024 * 1024 * 1024):F1} GB";
    }

    private void ToggleEmailDetails()
    {
        showEmailDetails = !showEmailDetails;
    }

    private void ToggleHtmlView()
    {
        showHtmlForThisEmail = !showHtmlForThisEmail;
    }

    private async Task PrintEmail()
    {
        if (email != null)
        {
            try
            {
                var printContent = "";
                var isHtml = false;

                // Determine what content to print based on user settings
                var hasHtmlContent = !string.IsNullOrEmpty(email.HtmlBody);
                var hasTextContent = !string.IsNullOrEmpty(email.TextBody);
                var shouldShowHtml = userSettings?.EnableHtmlParsing == true || showHtmlForThisEmail;

                if (hasHtmlContent && shouldShowHtml)
                {
                    // User wants HTML and we have HTML content
                    printContent = email.HtmlBody;
                    isHtml = true;
                }
                else if (hasHtmlContent && !shouldShowHtml)
                {
                    // User wants text but we have HTML - convert it
                    printContent = HtmlUtilityService.ConvertHtmlToText(email.HtmlBody ?? "", true);
                    if (string.IsNullOrWhiteSpace(printContent))
                    {
                        printContent = HtmlUtilityService.StripHtml(email.HtmlBody ?? "");
                    }

                    isHtml = false;
                }
                else if (hasTextContent)
                {
                    // We have text content
                    printContent = email.TextBody;
                    isHtml = false;
                }
                else
                {
                    // No content available
                    printContent = "This email has no content to display.";
                    isHtml = false;
                }

                await JSRuntime.InvokeVoidAsync("printEmailContent",
                    email.Subject ?? "No Subject",
                    printContent ?? "",
                    isHtml,
                    email.From ?? "Unknown Sender",
                    email.To ?? "Unknown Recipient",
                    email.DateReceived.ToString("MMM dd, yyyy 'at' HH:mm"));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error printing email: {ex.Message}");
                // TODO: Show user-friendly error message
            }
        }
    }

    private void ToggleImportant()
    {
        if (email != null)
        {
            try
            {
                // Update in database (assuming this method exists or will be implemented)
                // await EmailService.ToggleImportantAsync(email.Id);
                email.IsImportant = !email.IsImportant;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error toggling important status: {ex.Message}");
            }
        }
    }

    private async Task DeleteEmail()
    {
        if (email != null)
        {
            try
            {
                await EmailService.DeleteEmailAsync(email.Id);
                Navigation.NavigateTo("/");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting email: {ex.Message}");
            }
        }
    }


    public void Dispose()
    {
        objRef?.Dispose();
    }

}
